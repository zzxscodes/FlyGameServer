// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GuestLoginReq::GuestLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guest_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuestLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuestLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuestLoginReqDefaultTypeInternal() {}
  union {
    GuestLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuestLoginReqDefaultTypeInternal _GuestLoginReq_default_instance_;
PROTOBUF_CONSTEXPR UnameLoginReq::UnameLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnameLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnameLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnameLoginReqDefaultTypeInternal() {}
  union {
    UnameLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnameLoginReqDefaultTypeInternal _UnameLoginReq_default_instance_;
PROTOBUF_CONSTEXPR UserCenterInfo::UserCenterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uface_)*/0
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.uvip_)*/0
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserCenterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserCenterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserCenterInfoDefaultTypeInternal() {}
  union {
    UserCenterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserCenterInfoDefaultTypeInternal _UserCenterInfo_default_instance_;
PROTOBUF_CONSTEXPR GuestLoginRes::GuestLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uinfo_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct GuestLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuestLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuestLoginResDefaultTypeInternal() {}
  union {
    GuestLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuestLoginResDefaultTypeInternal _GuestLoginRes_default_instance_;
PROTOBUF_CONSTEXPR UnameLoginRes::UnameLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uinfo_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct UnameLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnameLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnameLoginResDefaultTypeInternal() {}
  union {
    UnameLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnameLoginResDefaultTypeInternal _UnameLoginRes_default_instance_;
PROTOBUF_CONSTEXPR EditProfileReq::EditProfileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uface_)*/0
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditProfileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditProfileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditProfileReqDefaultTypeInternal() {}
  union {
    EditProfileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditProfileReqDefaultTypeInternal _EditProfileReq_default_instance_;
PROTOBUF_CONSTEXPR EditProfileRes::EditProfileRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditProfileResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditProfileResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditProfileResDefaultTypeInternal() {}
  union {
    EditProfileRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditProfileResDefaultTypeInternal _EditProfileRes_default_instance_;
PROTOBUF_CONSTEXPR AccountUpgradeReq::AccountUpgradeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upwd_md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountUpgradeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountUpgradeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountUpgradeReqDefaultTypeInternal() {}
  union {
    AccountUpgradeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountUpgradeReqDefaultTypeInternal _AccountUpgradeReq_default_instance_;
PROTOBUF_CONSTEXPR AccountUpgradeRes::AccountUpgradeRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountUpgradeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountUpgradeResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountUpgradeResDefaultTypeInternal() {}
  union {
    AccountUpgradeRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountUpgradeResDefaultTypeInternal _AccountUpgradeRes_default_instance_;
PROTOBUF_CONSTEXPR LoginOutRes::LoginOutRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginOutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginOutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginOutResDefaultTypeInternal() {}
  union {
    LoginOutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginOutResDefaultTypeInternal _LoginOutRes_default_instance_;
PROTOBUF_CONSTEXPR UserGameInfo::UserGameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uchip_)*/0
  , /*decltype(_impl_.uexp_)*/0
  , /*decltype(_impl_.uvip_)*/0
  , /*decltype(_impl_.uchip2_)*/0
  , /*decltype(_impl_.uchip3_)*/0
  , /*decltype(_impl_.udata1_)*/0
  , /*decltype(_impl_.udata2_)*/0
  , /*decltype(_impl_.udata3_)*/0
  , /*decltype(_impl_.bonues_status_)*/0
  , /*decltype(_impl_.bonues_)*/0
  , /*decltype(_impl_.days_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserGameInfoDefaultTypeInternal() {}
  union {
    UserGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserGameInfoDefaultTypeInternal _UserGameInfo_default_instance_;
PROTOBUF_CONSTEXPR GetUgameInfoRes::GetUgameInfoRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uinfo_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct GetUgameInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUgameInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUgameInfoResDefaultTypeInternal() {}
  union {
    GetUgameInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUgameInfoResDefaultTypeInternal _GetUgameInfoRes_default_instance_;
PROTOBUF_CONSTEXPR RecvLoginBonuesRes::RecvLoginBonuesRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecvLoginBonuesResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecvLoginBonuesResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecvLoginBonuesResDefaultTypeInternal() {}
  union {
    RecvLoginBonuesRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecvLoginBonuesResDefaultTypeInternal _RecvLoginBonuesRes_default_instance_;
PROTOBUF_CONSTEXPR WorldChipRankInfo::WorldChipRankInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uface_)*/0
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.uvip_)*/0
  , /*decltype(_impl_.uchip_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldChipRankInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldChipRankInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldChipRankInfoDefaultTypeInternal() {}
  union {
    WorldChipRankInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldChipRankInfoDefaultTypeInternal _WorldChipRankInfo_default_instance_;
PROTOBUF_CONSTEXPR GetWorldRankUchipRes::GetWorldRankUchipRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_info_)*/{}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorldRankUchipResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldRankUchipResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldRankUchipResDefaultTypeInternal() {}
  union {
    GetWorldRankUchipRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldRankUchipResDefaultTypeInternal _GetWorldRankUchipRes_default_instance_;
PROTOBUF_CONSTEXPR GetSysMsgReq::GetSysMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ver_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSysMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSysMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSysMsgReqDefaultTypeInternal() {}
  union {
    GetSysMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSysMsgReqDefaultTypeInternal _GetSysMsgReq_default_instance_;
PROTOBUF_CONSTEXPR GetSysMsgRes::GetSysMsgRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sys_msgs_)*/{}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.ver_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSysMsgResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSysMsgResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSysMsgResDefaultTypeInternal() {}
  union {
    GetSysMsgRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSysMsgResDefaultTypeInternal _GetSysMsgRes_default_instance_;
PROTOBUF_CONSTEXPR LoginLogicRes::LoginLogicRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginLogicResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginLogicResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginLogicResDefaultTypeInternal() {}
  union {
    LoginLogicRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginLogicResDefaultTypeInternal _LoginLogicRes_default_instance_;
PROTOBUF_CONSTEXPR EnterZoneReq::EnterZoneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterZoneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterZoneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterZoneReqDefaultTypeInternal() {}
  union {
    EnterZoneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterZoneReqDefaultTypeInternal _EnterZoneReq_default_instance_;
PROTOBUF_CONSTEXPR EnterZoneRes::EnterZoneRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterZoneResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterZoneResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterZoneResDefaultTypeInternal() {}
  union {
    EnterZoneRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterZoneResDefaultTypeInternal _EnterZoneRes_default_instance_;
PROTOBUF_CONSTEXPR EnterMatch::EnterMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zid_)*/0
  , /*decltype(_impl_.matchid_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterMatchDefaultTypeInternal() {}
  union {
    EnterMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterMatchDefaultTypeInternal _EnterMatch_default_instance_;
PROTOBUF_CONSTEXPR UserArrived::UserArrived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uface_)*/0
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserArrivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserArrivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserArrivedDefaultTypeInternal() {}
  union {
    UserArrived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserArrivedDefaultTypeInternal _UserArrived_default_instance_;
PROTOBUF_CONSTEXPR ExitMatchRes::ExitMatchRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExitMatchResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExitMatchResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExitMatchResDefaultTypeInternal() {}
  union {
    ExitMatchRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExitMatchResDefaultTypeInternal _ExitMatchRes_default_instance_;
PROTOBUF_CONSTEXPR UserExitMatch::UserExitMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserExitMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserExitMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserExitMatchDefaultTypeInternal() {}
  union {
    UserExitMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserExitMatchDefaultTypeInternal _UserExitMatch_default_instance_;
PROTOBUF_CONSTEXPR PlayerMatchInfo::PlayerMatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.heroid_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerMatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMatchInfoDefaultTypeInternal() {}
  union {
    PlayerMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMatchInfoDefaultTypeInternal _PlayerMatchInfo_default_instance_;
PROTOBUF_CONSTEXPR GameStart::GameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_match_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartDefaultTypeInternal() {}
  union {
    GameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartDefaultTypeInternal _GameStart_default_instance_;
PROTOBUF_CONSTEXPR UdpTest::UdpTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UdpTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UdpTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UdpTestDefaultTypeInternal() {}
  union {
    UdpTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UdpTestDefaultTypeInternal _UdpTest_default_instance_;
PROTOBUF_CONSTEXPR LoginLogicReq::LoginLogicReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.udp_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.udp_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginLogicReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginLogicReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginLogicReqDefaultTypeInternal() {}
  union {
    LoginLogicReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginLogicReqDefaultTypeInternal _LoginLogicReq_default_instance_;
PROTOBUF_CONSTEXPR OptionEvent::OptionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.opt_type_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct OptionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionEventDefaultTypeInternal() {}
  union {
    OptionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionEventDefaultTypeInternal _OptionEvent_default_instance_;
PROTOBUF_CONSTEXPR FrameOpts::FrameOpts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opts_)*/{}
  , /*decltype(_impl_.frameid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameOptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameOptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameOptsDefaultTypeInternal() {}
  union {
    FrameOpts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameOptsDefaultTypeInternal _FrameOpts_default_instance_;
PROTOBUF_CONSTEXPR LogicFrame::LogicFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unsync_frames_)*/{}
  , /*decltype(_impl_.frameid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicFrameDefaultTypeInternal() {}
  union {
    LogicFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicFrameDefaultTypeInternal _LogicFrame_default_instance_;
PROTOBUF_CONSTEXPR NextFrameOpts::NextFrameOpts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opts_)*/{}
  , /*decltype(_impl_.frameid_)*/0
  , /*decltype(_impl_.zid_)*/0
  , /*decltype(_impl_.matchid_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextFrameOptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextFrameOptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextFrameOptsDefaultTypeInternal() {}
  union {
    NextFrameOpts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextFrameOptsDefaultTypeInternal _NextFrameOpts_default_instance_;
static ::_pb::Metadata file_level_metadata_game_2eproto[32];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_game_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const uint32_t TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GuestLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuestLoginReq, _impl_.guest_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnameLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UnameLoginReq, _impl_.uname_),
  PROTOBUF_FIELD_OFFSET(::UnameLoginReq, _impl_.upwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.uface_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.uvip_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _impl_.uinfo_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::UnameLoginRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::UnameLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UnameLoginRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::UnameLoginRes, _impl_.uinfo_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _impl_.uface_),
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _impl_.usex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EditProfileRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EditProfileRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountUpgradeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AccountUpgradeReq, _impl_.uname_),
  PROTOBUF_FIELD_OFFSET(::AccountUpgradeReq, _impl_.upwd_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountUpgradeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AccountUpgradeRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginOutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LoginOutRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.uchip_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.uexp_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.uvip_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.uchip2_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.uchip3_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.udata1_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.udata2_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.udata3_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.bonues_status_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.bonues_),
  PROTOBUF_FIELD_OFFSET(::UserGameInfo, _impl_.days_),
  PROTOBUF_FIELD_OFFSET(::GetUgameInfoRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GetUgameInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetUgameInfoRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GetUgameInfoRes, _impl_.uinfo_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RecvLoginBonuesRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RecvLoginBonuesRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldChipRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WorldChipRankInfo, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::WorldChipRankInfo, _impl_.uface_),
  PROTOBUF_FIELD_OFFSET(::WorldChipRankInfo, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::WorldChipRankInfo, _impl_.uvip_),
  PROTOBUF_FIELD_OFFSET(::WorldChipRankInfo, _impl_.uchip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetWorldRankUchipRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetWorldRankUchipRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GetWorldRankUchipRes, _impl_.rank_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgReq, _impl_.ver_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _impl_.ver_num_),
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _impl_.sys_msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginLogicRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LoginLogicRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterZoneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterZoneReq, _impl_.zid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterZoneRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterZoneRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.zid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserArrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserArrived, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::UserArrived, _impl_.uface_),
  PROTOBUF_FIELD_OFFSET(::UserArrived, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::UserArrived, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::UserArrived, _impl_.side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExitMatchRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExitMatchRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserExitMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserExitMatch, _impl_.seatid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerMatchInfo, _impl_.heroid_),
  PROTOBUF_FIELD_OFFSET(::PlayerMatchInfo, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::PlayerMatchInfo, _impl_.side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameStart, _impl_.players_match_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UdpTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UdpTest, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginLogicReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LoginLogicReq, _impl_.udp_ip_),
  PROTOBUF_FIELD_OFFSET(::LoginLogicReq, _impl_.udp_port_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.opt_type_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.y_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FrameOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FrameOpts, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::FrameOpts, _impl_.opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogicFrame, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::LogicFrame, _impl_.unsync_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NextFrameOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NextFrameOpts, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpts, _impl_.zid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpts, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpts, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpts, _impl_.opts_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GuestLoginReq)},
  { 7, -1, -1, sizeof(::UnameLoginReq)},
  { 15, -1, -1, sizeof(::UserCenterInfo)},
  { 26, 34, -1, sizeof(::GuestLoginRes)},
  { 36, 44, -1, sizeof(::UnameLoginRes)},
  { 46, -1, -1, sizeof(::EditProfileReq)},
  { 55, -1, -1, sizeof(::EditProfileRes)},
  { 62, -1, -1, sizeof(::AccountUpgradeReq)},
  { 70, -1, -1, sizeof(::AccountUpgradeRes)},
  { 77, -1, -1, sizeof(::LoginOutRes)},
  { 84, -1, -1, sizeof(::UserGameInfo)},
  { 101, 109, -1, sizeof(::GetUgameInfoRes)},
  { 111, -1, -1, sizeof(::RecvLoginBonuesRes)},
  { 118, -1, -1, sizeof(::WorldChipRankInfo)},
  { 129, -1, -1, sizeof(::GetWorldRankUchipRes)},
  { 137, -1, -1, sizeof(::GetSysMsgReq)},
  { 144, -1, -1, sizeof(::GetSysMsgRes)},
  { 153, -1, -1, sizeof(::LoginLogicRes)},
  { 160, -1, -1, sizeof(::EnterZoneReq)},
  { 167, -1, -1, sizeof(::EnterZoneRes)},
  { 174, -1, -1, sizeof(::EnterMatch)},
  { 184, -1, -1, sizeof(::UserArrived)},
  { 195, -1, -1, sizeof(::ExitMatchRes)},
  { 202, -1, -1, sizeof(::UserExitMatch)},
  { 209, -1, -1, sizeof(::PlayerMatchInfo)},
  { 218, -1, -1, sizeof(::GameStart)},
  { 225, -1, -1, sizeof(::UdpTest)},
  { 232, -1, -1, sizeof(::LoginLogicReq)},
  { 240, 250, -1, sizeof(::OptionEvent)},
  { 254, -1, -1, sizeof(::FrameOpts)},
  { 262, -1, -1, sizeof(::LogicFrame)},
  { 270, -1, -1, sizeof(::NextFrameOpts)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_GuestLoginReq_default_instance_._instance,
  &::_UnameLoginReq_default_instance_._instance,
  &::_UserCenterInfo_default_instance_._instance,
  &::_GuestLoginRes_default_instance_._instance,
  &::_UnameLoginRes_default_instance_._instance,
  &::_EditProfileReq_default_instance_._instance,
  &::_EditProfileRes_default_instance_._instance,
  &::_AccountUpgradeReq_default_instance_._instance,
  &::_AccountUpgradeRes_default_instance_._instance,
  &::_LoginOutRes_default_instance_._instance,
  &::_UserGameInfo_default_instance_._instance,
  &::_GetUgameInfoRes_default_instance_._instance,
  &::_RecvLoginBonuesRes_default_instance_._instance,
  &::_WorldChipRankInfo_default_instance_._instance,
  &::_GetWorldRankUchipRes_default_instance_._instance,
  &::_GetSysMsgReq_default_instance_._instance,
  &::_GetSysMsgRes_default_instance_._instance,
  &::_LoginLogicRes_default_instance_._instance,
  &::_EnterZoneReq_default_instance_._instance,
  &::_EnterZoneRes_default_instance_._instance,
  &::_EnterMatch_default_instance_._instance,
  &::_UserArrived_default_instance_._instance,
  &::_ExitMatchRes_default_instance_._instance,
  &::_UserExitMatch_default_instance_._instance,
  &::_PlayerMatchInfo_default_instance_._instance,
  &::_GameStart_default_instance_._instance,
  &::_UdpTest_default_instance_._instance,
  &::_LoginLogicReq_default_instance_._instance,
  &::_OptionEvent_default_instance_._instance,
  &::_FrameOpts_default_instance_._instance,
  &::_LogicFrame_default_instance_._instance,
  &::_NextFrameOpts_default_instance_._instance,
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\"\"\n\rGuestLoginReq\022\021\n\tguest_k"
  "ey\030\001 \001(\t\",\n\rUnameLoginReq\022\r\n\005uname\030\001 \001(\t"
  "\022\014\n\004upwd\030\002 \001(\t\"W\n\016UserCenterInfo\022\r\n\005unic"
  "k\030\001 \001(\t\022\r\n\005uface\030\002 \001(\005\022\014\n\004usex\030\003 \001(\005\022\014\n\004"
  "uvip\030\004 \001(\005\022\013\n\003uid\030\005 \001(\005\"N\n\rGuestLoginRes"
  "\022\016\n\006status\030\001 \001(\005\022#\n\005uinfo\030\002 \001(\0132\017.UserCe"
  "nterInfoH\000\210\001\001B\010\n\006_uinfo\"N\n\rUnameLoginRes"
  "\022\016\n\006status\030\001 \001(\005\022#\n\005uinfo\030\002 \001(\0132\017.UserCe"
  "nterInfoH\000\210\001\001B\010\n\006_uinfo\"<\n\016EditProfileRe"
  "q\022\r\n\005unick\030\001 \001(\t\022\r\n\005uface\030\002 \001(\005\022\014\n\004usex\030"
  "\003 \001(\005\" \n\016EditProfileRes\022\016\n\006status\030\001 \001(\005\""
  "4\n\021AccountUpgradeReq\022\r\n\005uname\030\001 \001(\t\022\020\n\010u"
  "pwd_md5\030\002 \001(\t\"#\n\021AccountUpgradeRes\022\016\n\006st"
  "atus\030\001 \001(\005\"\035\n\013LoginOutRes\022\016\n\006status\030\001 \001("
  "\005\"\276\001\n\014UserGameInfo\022\r\n\005uchip\030\001 \001(\005\022\014\n\004uex"
  "p\030\002 \001(\005\022\014\n\004uvip\030\003 \001(\005\022\016\n\006uchip2\030\004 \001(\005\022\016\n"
  "\006uchip3\030\005 \001(\005\022\016\n\006udata1\030\006 \001(\005\022\016\n\006udata2\030"
  "\007 \001(\005\022\016\n\006udata3\030\010 \001(\005\022\025\n\rbonues_status\030\t"
  " \001(\005\022\016\n\006bonues\030\n \001(\005\022\014\n\004days\030\013 \001(\005\"N\n\017Ge"
  "tUgameInfoRes\022\016\n\006status\030\001 \001(\005\022!\n\005uinfo\030\002"
  " \001(\0132\r.UserGameInfoH\000\210\001\001B\010\n\006_uinfo\"$\n\022Re"
  "cvLoginBonuesRes\022\016\n\006status\030\001 \001(\005\"\\\n\021Worl"
  "dChipRankInfo\022\r\n\005unick\030\001 \001(\t\022\r\n\005uface\030\002 "
  "\001(\005\022\014\n\004usex\030\003 \001(\005\022\014\n\004uvip\030\004 \001(\005\022\r\n\005uchip"
  "\030\005 \001(\005\"M\n\024GetWorldRankUchipRes\022\016\n\006status"
  "\030\001 \001(\005\022%\n\trank_info\030\002 \003(\0132\022.WorldChipRan"
  "kInfo\"\037\n\014GetSysMsgReq\022\017\n\007ver_num\030\001 \001(\005\"A"
  "\n\014GetSysMsgRes\022\016\n\006status\030\001 \001(\005\022\017\n\007ver_nu"
  "m\030\002 \001(\005\022\020\n\010sys_msgs\030\003 \003(\t\"\037\n\rLoginLogicR"
  "es\022\016\n\006status\030\001 \001(\005\"\033\n\014EnterZoneReq\022\013\n\003zi"
  "d\030\001 \001(\005\"\036\n\014EnterZoneRes\022\016\n\006status\030\001 \001(\005\""
  "H\n\nEnterMatch\022\013\n\003zid\030\001 \001(\005\022\017\n\007matchid\030\002 "
  "\001(\005\022\016\n\006seatid\030\003 \001(\005\022\014\n\004side\030\004 \001(\005\"W\n\013Use"
  "rArrived\022\r\n\005unick\030\001 \001(\t\022\r\n\005uface\030\002 \001(\005\022\014"
  "\n\004usex\030\003 \001(\005\022\016\n\006seatid\030\004 \001(\005\022\014\n\004side\030\005 \001"
  "(\005\"\036\n\014ExitMatchRes\022\016\n\006status\030\001 \001(\005\"\037\n\rUs"
  "erExitMatch\022\016\n\006seatid\030\001 \001(\005\"\?\n\017PlayerMat"
  "chInfo\022\016\n\006heroid\030\001 \001(\005\022\016\n\006seatid\030\002 \001(\005\022\014"
  "\n\004side\030\003 \001(\005\"9\n\tGameStart\022,\n\022players_mat"
  "ch_info\030\001 \003(\0132\020.PlayerMatchInfo\"\032\n\007UdpTe"
  "st\022\017\n\007content\030\001 \001(\t\"1\n\rLoginLogicReq\022\016\n\006"
  "udp_ip\030\001 \001(\t\022\020\n\010udp_port\030\002 \001(\005\"[\n\013Option"
  "Event\022\016\n\006seatid\030\001 \001(\005\022\020\n\010opt_type\030\002 \001(\005\022"
  "\016\n\001x\030\003 \001(\005H\000\210\001\001\022\016\n\001y\030\004 \001(\005H\001\210\001\001B\004\n\002_xB\004\n"
  "\002_y\"8\n\tFrameOpts\022\017\n\007frameid\030\001 \001(\005\022\032\n\004opt"
  "s\030\002 \003(\0132\014.OptionEvent\"@\n\nLogicFrame\022\017\n\007f"
  "rameid\030\001 \001(\005\022!\n\runsync_frames\030\002 \003(\0132\n.Fr"
  "ameOpts\"j\n\rNextFrameOpts\022\017\n\007frameid\030\001 \001("
  "\005\022\013\n\003zid\030\002 \001(\005\022\017\n\007matchid\030\003 \001(\005\022\016\n\006seati"
  "d\030\004 \001(\005\022\032\n\004opts\030\005 \003(\0132\014.OptionEvent*<\n\005S"
  "type\022\022\n\016INVALIDI_STYPE\020\000\022\010\n\004Auth\020\001\022\n\n\006Sy"
  "stem\020\002\022\t\n\005Logic\020\003*\255\005\n\003Cmd\022\017\n\013INVALID_CMD"
  "\020\000\022\022\n\016eGuestLoginReq\020\001\022\022\n\016eGuestLoginRes"
  "\020\002\022\014\n\010eRelogin\020\003\022\021\n\reUserLostConn\020\004\022\023\n\017e"
  "EditProfileReq\020\005\022\023\n\017eEditProfileRes\020\006\022\026\n"
  "\022eAccountUpgradeReq\020\007\022\026\n\022eAccountUpgrade"
  "Res\020\010\022\022\n\016eUnameLoginReq\020\t\022\022\n\016eUnameLogin"
  "Res\020\n\022\020\n\014eLoginOutReq\020\013\022\020\n\014eLoginOutRes\020"
  "\014\022\024\n\020eGetUgameInfoReq\020\r\022\024\n\020eGetUgameInfo"
  "Res\020\016\022\027\n\023eRecvLoginBonuesReq\020\017\022\027\n\023eRecvL"
  "oginBonuesRes\020\020\022\031\n\025eGetWorldRankUchipReq"
  "\020\021\022\031\n\025eGetWorldRankUchipRes\020\022\022\021\n\reGetSys"
  "MsgReq\020\023\022\021\n\reGetSysMsgRes\020\024\022\022\n\016eLoginLog"
  "icReq\020\025\022\022\n\016eLoginLogicRes\020\026\022\021\n\reEnterZon"
  "eReq\020\027\022\021\n\reEnterZoneRes\020\030\022\017\n\013eEnterMatch"
  "\020\031\022\020\n\014eUserArrived\020\032\022\021\n\reExitMatchReq\020\033\022"
  "\021\n\reExitMatchRes\020\034\022\022\n\016eUserExitMatch\020\035\022\016"
  "\n\neGameStart\020\036\022\014\n\010eUdpTest\020\037\022\017\n\013eLogicFr"
  "ame\020 \022\022\n\016eNextFrameOpts\020!b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_game_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_game_2eproto = {
    false, false, 2753, descriptor_table_protodef_game_2eproto,
    "game.proto",
    &descriptor_table_game_2eproto_once, nullptr, 0, 32,
    schemas, file_default_instances, TableStruct_game_2eproto::offsets,
    file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto,
    file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_game_2eproto_getter() {
  return &descriptor_table_game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
bool Stype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[1];
}
bool Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GuestLoginReq::_Internal {
 public:
};

GuestLoginReq::GuestLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GuestLoginReq)
}
GuestLoginReq::GuestLoginReq(const GuestLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuestLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guest_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guest_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guest_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guest_key().empty()) {
    _this->_impl_.guest_key_.Set(from._internal_guest_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GuestLoginReq)
}

inline void GuestLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guest_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guest_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guest_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuestLoginReq::~GuestLoginReq() {
  // @@protoc_insertion_point(destructor:GuestLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuestLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guest_key_.Destroy();
}

void GuestLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuestLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GuestLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guest_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuestLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string guest_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guest_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GuestLoginReq.guest_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuestLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuestLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string guest_key = 1;
  if (!this->_internal_guest_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guest_key().data(), static_cast<int>(this->_internal_guest_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GuestLoginReq.guest_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guest_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuestLoginReq)
  return target;
}

size_t GuestLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuestLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string guest_key = 1;
  if (!this->_internal_guest_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guest_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuestLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuestLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuestLoginReq::GetClassData() const { return &_class_data_; }


void GuestLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuestLoginReq*>(&to_msg);
  auto& from = static_cast<const GuestLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GuestLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guest_key().empty()) {
    _this->_internal_set_guest_key(from._internal_guest_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuestLoginReq::CopyFrom(const GuestLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuestLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestLoginReq::IsInitialized() const {
  return true;
}

void GuestLoginReq::InternalSwap(GuestLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guest_key_, lhs_arena,
      &other->_impl_.guest_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GuestLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[0]);
}

// ===================================================================

class UnameLoginReq::_Internal {
 public:
};

UnameLoginReq::UnameLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UnameLoginReq)
}
UnameLoginReq::UnameLoginReq(const UnameLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnameLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uname().empty()) {
    _this->_impl_.uname_.Set(from._internal_uname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.upwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upwd().empty()) {
    _this->_impl_.upwd_.Set(from._internal_upwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UnameLoginReq)
}

inline void UnameLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.upwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnameLoginReq::~UnameLoginReq() {
  // @@protoc_insertion_point(destructor:UnameLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnameLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uname_.Destroy();
  _impl_.upwd_.Destroy();
}

void UnameLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnameLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UnameLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uname_.ClearToEmpty();
  _impl_.upwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnameLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UnameLoginReq.uname"));
        } else
          goto handle_unusual;
        continue;
      // string upwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UnameLoginReq.upwd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnameLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnameLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uname().data(), static_cast<int>(this->_internal_uname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnameLoginReq.uname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uname(), target);
  }

  // string upwd = 2;
  if (!this->_internal_upwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upwd().data(), static_cast<int>(this->_internal_upwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnameLoginReq.upwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnameLoginReq)
  return target;
}

size_t UnameLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnameLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uname());
  }

  // string upwd = 2;
  if (!this->_internal_upwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnameLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnameLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnameLoginReq::GetClassData() const { return &_class_data_; }


void UnameLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnameLoginReq*>(&to_msg);
  auto& from = static_cast<const UnameLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UnameLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uname().empty()) {
    _this->_internal_set_uname(from._internal_uname());
  }
  if (!from._internal_upwd().empty()) {
    _this->_internal_set_upwd(from._internal_upwd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnameLoginReq::CopyFrom(const UnameLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnameLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnameLoginReq::IsInitialized() const {
  return true;
}

void UnameLoginReq::InternalSwap(UnameLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uname_, lhs_arena,
      &other->_impl_.uname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upwd_, lhs_arena,
      &other->_impl_.upwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnameLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[1]);
}

// ===================================================================

class UserCenterInfo::_Internal {
 public:
};

UserCenterInfo::UserCenterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserCenterInfo)
}
UserCenterInfo::UserCenterInfo(const UserCenterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserCenterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.uvip_){}
    , decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uface_, &from._impl_.uface_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uid_) -
    reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.uid_));
  // @@protoc_insertion_point(copy_constructor:UserCenterInfo)
}

inline void UserCenterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){0}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.uvip_){0}
    , decltype(_impl_.uid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserCenterInfo::~UserCenterInfo() {
  // @@protoc_insertion_point(destructor:UserCenterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserCenterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void UserCenterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserCenterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserCenterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.uface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uid_) -
      reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserCenterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserCenterInfo.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 uface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uvip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserCenterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserCenterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserCenterInfo.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uface(), target);
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usex(), target);
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uvip(), target);
  }

  // int32 uid = 5;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCenterInfo)
  return target;
}

size_t UserCenterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserCenterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uface());
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uvip());
  }

  // int32 uid = 5;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserCenterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserCenterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserCenterInfo::GetClassData() const { return &_class_data_; }


void UserCenterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserCenterInfo*>(&to_msg);
  auto& from = static_cast<const UserCenterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserCenterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_uface() != 0) {
    _this->_internal_set_uface(from._internal_uface());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_uvip() != 0) {
    _this->_internal_set_uvip(from._internal_uvip());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserCenterInfo::CopyFrom(const UserCenterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserCenterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCenterInfo::IsInitialized() const {
  return true;
}

void UserCenterInfo::InternalSwap(UserCenterInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserCenterInfo, _impl_.uid_)
      + sizeof(UserCenterInfo::_impl_.uid_)
      - PROTOBUF_FIELD_OFFSET(UserCenterInfo, _impl_.uface_)>(
          reinterpret_cast<char*>(&_impl_.uface_),
          reinterpret_cast<char*>(&other->_impl_.uface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserCenterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[2]);
}

// ===================================================================

class GuestLoginRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GuestLoginRes>()._impl_._has_bits_);
  static const ::UserCenterInfo& uinfo(const GuestLoginRes* msg);
  static void set_has_uinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::UserCenterInfo&
GuestLoginRes::_Internal::uinfo(const GuestLoginRes* msg) {
  return *msg->_impl_.uinfo_;
}
GuestLoginRes::GuestLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GuestLoginRes)
}
GuestLoginRes::GuestLoginRes(const GuestLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuestLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uinfo()) {
    _this->_impl_.uinfo_ = new ::UserCenterInfo(*from._impl_.uinfo_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GuestLoginRes)
}

inline void GuestLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

GuestLoginRes::~GuestLoginRes() {
  // @@protoc_insertion_point(destructor:GuestLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuestLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uinfo_;
}

void GuestLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuestLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GuestLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uinfo_ != nullptr);
    _impl_.uinfo_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuestLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserCenterInfo uinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuestLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuestLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .UserCenterInfo uinfo = 2;
  if (_internal_has_uinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uinfo(this),
        _Internal::uinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuestLoginRes)
  return target;
}

size_t GuestLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuestLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .UserCenterInfo uinfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uinfo_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuestLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuestLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuestLoginRes::GetClassData() const { return &_class_data_; }


void GuestLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuestLoginRes*>(&to_msg);
  auto& from = static_cast<const GuestLoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GuestLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uinfo()) {
    _this->_internal_mutable_uinfo()->::UserCenterInfo::MergeFrom(
        from._internal_uinfo());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuestLoginRes::CopyFrom(const GuestLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuestLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestLoginRes::IsInitialized() const {
  return true;
}

void GuestLoginRes::InternalSwap(GuestLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuestLoginRes, _impl_.status_)
      + sizeof(GuestLoginRes::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GuestLoginRes, _impl_.uinfo_)>(
          reinterpret_cast<char*>(&_impl_.uinfo_),
          reinterpret_cast<char*>(&other->_impl_.uinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuestLoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[3]);
}

// ===================================================================

class UnameLoginRes::_Internal {
 public:
  using HasBits = decltype(std::declval<UnameLoginRes>()._impl_._has_bits_);
  static const ::UserCenterInfo& uinfo(const UnameLoginRes* msg);
  static void set_has_uinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::UserCenterInfo&
UnameLoginRes::_Internal::uinfo(const UnameLoginRes* msg) {
  return *msg->_impl_.uinfo_;
}
UnameLoginRes::UnameLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UnameLoginRes)
}
UnameLoginRes::UnameLoginRes(const UnameLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnameLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uinfo()) {
    _this->_impl_.uinfo_ = new ::UserCenterInfo(*from._impl_.uinfo_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:UnameLoginRes)
}

inline void UnameLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

UnameLoginRes::~UnameLoginRes() {
  // @@protoc_insertion_point(destructor:UnameLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnameLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uinfo_;
}

void UnameLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnameLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:UnameLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uinfo_ != nullptr);
    _impl_.uinfo_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnameLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserCenterInfo uinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnameLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnameLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .UserCenterInfo uinfo = 2;
  if (_internal_has_uinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uinfo(this),
        _Internal::uinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnameLoginRes)
  return target;
}

size_t UnameLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnameLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .UserCenterInfo uinfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uinfo_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnameLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnameLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnameLoginRes::GetClassData() const { return &_class_data_; }


void UnameLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnameLoginRes*>(&to_msg);
  auto& from = static_cast<const UnameLoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UnameLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uinfo()) {
    _this->_internal_mutable_uinfo()->::UserCenterInfo::MergeFrom(
        from._internal_uinfo());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnameLoginRes::CopyFrom(const UnameLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnameLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnameLoginRes::IsInitialized() const {
  return true;
}

void UnameLoginRes::InternalSwap(UnameLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnameLoginRes, _impl_.status_)
      + sizeof(UnameLoginRes::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(UnameLoginRes, _impl_.uinfo_)>(
          reinterpret_cast<char*>(&_impl_.uinfo_),
          reinterpret_cast<char*>(&other->_impl_.uinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnameLoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[4]);
}

// ===================================================================

class EditProfileReq::_Internal {
 public:
};

EditProfileReq::EditProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EditProfileReq)
}
EditProfileReq::EditProfileReq(const EditProfileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditProfileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){}
    , decltype(_impl_.usex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uface_, &from._impl_.uface_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usex_) -
    reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.usex_));
  // @@protoc_insertion_point(copy_constructor:EditProfileReq)
}

inline void EditProfileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){0}
    , decltype(_impl_.usex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EditProfileReq::~EditProfileReq() {
  // @@protoc_insertion_point(destructor:EditProfileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditProfileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void EditProfileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditProfileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EditProfileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.uface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usex_) -
      reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.usex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditProfileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EditProfileReq.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 uface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditProfileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EditProfileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EditProfileReq.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uface(), target);
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EditProfileReq)
  return target;
}

size_t EditProfileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EditProfileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uface());
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditProfileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditProfileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditProfileReq::GetClassData() const { return &_class_data_; }


void EditProfileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditProfileReq*>(&to_msg);
  auto& from = static_cast<const EditProfileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EditProfileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_uface() != 0) {
    _this->_internal_set_uface(from._internal_uface());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditProfileReq::CopyFrom(const EditProfileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EditProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditProfileReq::IsInitialized() const {
  return true;
}

void EditProfileReq::InternalSwap(EditProfileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditProfileReq, _impl_.usex_)
      + sizeof(EditProfileReq::_impl_.usex_)
      - PROTOBUF_FIELD_OFFSET(EditProfileReq, _impl_.uface_)>(
          reinterpret_cast<char*>(&_impl_.uface_),
          reinterpret_cast<char*>(&other->_impl_.uface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EditProfileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[5]);
}

// ===================================================================

class EditProfileRes::_Internal {
 public:
};

EditProfileRes::EditProfileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EditProfileRes)
}
EditProfileRes::EditProfileRes(const EditProfileRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditProfileRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:EditProfileRes)
}

inline void EditProfileRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EditProfileRes::~EditProfileRes() {
  // @@protoc_insertion_point(destructor:EditProfileRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditProfileRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EditProfileRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditProfileRes::Clear() {
// @@protoc_insertion_point(message_clear_start:EditProfileRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditProfileRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditProfileRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EditProfileRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EditProfileRes)
  return target;
}

size_t EditProfileRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EditProfileRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditProfileRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditProfileRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditProfileRes::GetClassData() const { return &_class_data_; }


void EditProfileRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditProfileRes*>(&to_msg);
  auto& from = static_cast<const EditProfileRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EditProfileRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditProfileRes::CopyFrom(const EditProfileRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EditProfileRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditProfileRes::IsInitialized() const {
  return true;
}

void EditProfileRes::InternalSwap(EditProfileRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditProfileRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[6]);
}

// ===================================================================

class AccountUpgradeReq::_Internal {
 public:
};

AccountUpgradeReq::AccountUpgradeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AccountUpgradeReq)
}
AccountUpgradeReq::AccountUpgradeReq(const AccountUpgradeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountUpgradeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_md5_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uname().empty()) {
    _this->_impl_.uname_.Set(from._internal_uname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.upwd_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upwd_md5().empty()) {
    _this->_impl_.upwd_md5_.Set(from._internal_upwd_md5(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AccountUpgradeReq)
}

inline void AccountUpgradeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_md5_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.upwd_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountUpgradeReq::~AccountUpgradeReq() {
  // @@protoc_insertion_point(destructor:AccountUpgradeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountUpgradeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uname_.Destroy();
  _impl_.upwd_md5_.Destroy();
}

void AccountUpgradeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountUpgradeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountUpgradeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uname_.ClearToEmpty();
  _impl_.upwd_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountUpgradeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AccountUpgradeReq.uname"));
        } else
          goto handle_unusual;
        continue;
      // string upwd_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upwd_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AccountUpgradeReq.upwd_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountUpgradeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountUpgradeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uname().data(), static_cast<int>(this->_internal_uname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountUpgradeReq.uname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uname(), target);
  }

  // string upwd_md5 = 2;
  if (!this->_internal_upwd_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upwd_md5().data(), static_cast<int>(this->_internal_upwd_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountUpgradeReq.upwd_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upwd_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountUpgradeReq)
  return target;
}

size_t AccountUpgradeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountUpgradeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uname());
  }

  // string upwd_md5 = 2;
  if (!this->_internal_upwd_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upwd_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountUpgradeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountUpgradeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountUpgradeReq::GetClassData() const { return &_class_data_; }


void AccountUpgradeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountUpgradeReq*>(&to_msg);
  auto& from = static_cast<const AccountUpgradeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AccountUpgradeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uname().empty()) {
    _this->_internal_set_uname(from._internal_uname());
  }
  if (!from._internal_upwd_md5().empty()) {
    _this->_internal_set_upwd_md5(from._internal_upwd_md5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountUpgradeReq::CopyFrom(const AccountUpgradeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountUpgradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountUpgradeReq::IsInitialized() const {
  return true;
}

void AccountUpgradeReq::InternalSwap(AccountUpgradeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uname_, lhs_arena,
      &other->_impl_.uname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upwd_md5_, lhs_arena,
      &other->_impl_.upwd_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountUpgradeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[7]);
}

// ===================================================================

class AccountUpgradeRes::_Internal {
 public:
};

AccountUpgradeRes::AccountUpgradeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AccountUpgradeRes)
}
AccountUpgradeRes::AccountUpgradeRes(const AccountUpgradeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountUpgradeRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:AccountUpgradeRes)
}

inline void AccountUpgradeRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccountUpgradeRes::~AccountUpgradeRes() {
  // @@protoc_insertion_point(destructor:AccountUpgradeRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountUpgradeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountUpgradeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountUpgradeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountUpgradeRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountUpgradeRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountUpgradeRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountUpgradeRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountUpgradeRes)
  return target;
}

size_t AccountUpgradeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountUpgradeRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountUpgradeRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountUpgradeRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountUpgradeRes::GetClassData() const { return &_class_data_; }


void AccountUpgradeRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountUpgradeRes*>(&to_msg);
  auto& from = static_cast<const AccountUpgradeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AccountUpgradeRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountUpgradeRes::CopyFrom(const AccountUpgradeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountUpgradeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountUpgradeRes::IsInitialized() const {
  return true;
}

void AccountUpgradeRes::InternalSwap(AccountUpgradeRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountUpgradeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[8]);
}

// ===================================================================

class LoginOutRes::_Internal {
 public:
};

LoginOutRes::LoginOutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LoginOutRes)
}
LoginOutRes::LoginOutRes(const LoginOutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginOutRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:LoginOutRes)
}

inline void LoginOutRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoginOutRes::~LoginOutRes() {
  // @@protoc_insertion_point(destructor:LoginOutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginOutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginOutRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginOutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginOutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginOutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginOutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginOutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginOutRes)
  return target;
}

size_t LoginOutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginOutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginOutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginOutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginOutRes::GetClassData() const { return &_class_data_; }


void LoginOutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginOutRes*>(&to_msg);
  auto& from = static_cast<const LoginOutRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LoginOutRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginOutRes::CopyFrom(const LoginOutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginOutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginOutRes::IsInitialized() const {
  return true;
}

void LoginOutRes::InternalSwap(LoginOutRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginOutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[9]);
}

// ===================================================================

class UserGameInfo::_Internal {
 public:
};

UserGameInfo::UserGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserGameInfo)
}
UserGameInfo::UserGameInfo(const UserGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserGameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uchip_){}
    , decltype(_impl_.uexp_){}
    , decltype(_impl_.uvip_){}
    , decltype(_impl_.uchip2_){}
    , decltype(_impl_.uchip3_){}
    , decltype(_impl_.udata1_){}
    , decltype(_impl_.udata2_){}
    , decltype(_impl_.udata3_){}
    , decltype(_impl_.bonues_status_){}
    , decltype(_impl_.bonues_){}
    , decltype(_impl_.days_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uchip_, &from._impl_.uchip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.days_) -
    reinterpret_cast<char*>(&_impl_.uchip_)) + sizeof(_impl_.days_));
  // @@protoc_insertion_point(copy_constructor:UserGameInfo)
}

inline void UserGameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uchip_){0}
    , decltype(_impl_.uexp_){0}
    , decltype(_impl_.uvip_){0}
    , decltype(_impl_.uchip2_){0}
    , decltype(_impl_.uchip3_){0}
    , decltype(_impl_.udata1_){0}
    , decltype(_impl_.udata2_){0}
    , decltype(_impl_.udata3_){0}
    , decltype(_impl_.bonues_status_){0}
    , decltype(_impl_.bonues_){0}
    , decltype(_impl_.days_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserGameInfo::~UserGameInfo() {
  // @@protoc_insertion_point(destructor:UserGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserGameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.uchip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.days_) -
      reinterpret_cast<char*>(&_impl_.uchip_)) + sizeof(_impl_.days_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uchip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uchip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uexp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uvip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.uvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uchip2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uchip2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uchip3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uchip3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udata1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.udata1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udata2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.udata2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udata3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.udata3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bonues_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bonues_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bonues = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bonues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 days = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uchip = 1;
  if (this->_internal_uchip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uchip(), target);
  }

  // int32 uexp = 2;
  if (this->_internal_uexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uexp(), target);
  }

  // int32 uvip = 3;
  if (this->_internal_uvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_uvip(), target);
  }

  // int32 uchip2 = 4;
  if (this->_internal_uchip2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uchip2(), target);
  }

  // int32 uchip3 = 5;
  if (this->_internal_uchip3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_uchip3(), target);
  }

  // int32 udata1 = 6;
  if (this->_internal_udata1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_udata1(), target);
  }

  // int32 udata2 = 7;
  if (this->_internal_udata2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_udata2(), target);
  }

  // int32 udata3 = 8;
  if (this->_internal_udata3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_udata3(), target);
  }

  // int32 bonues_status = 9;
  if (this->_internal_bonues_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_bonues_status(), target);
  }

  // int32 bonues = 10;
  if (this->_internal_bonues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bonues(), target);
  }

  // int32 days = 11;
  if (this->_internal_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserGameInfo)
  return target;
}

size_t UserGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uchip = 1;
  if (this->_internal_uchip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip());
  }

  // int32 uexp = 2;
  if (this->_internal_uexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uexp());
  }

  // int32 uvip = 3;
  if (this->_internal_uvip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uvip());
  }

  // int32 uchip2 = 4;
  if (this->_internal_uchip2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip2());
  }

  // int32 uchip3 = 5;
  if (this->_internal_uchip3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip3());
  }

  // int32 udata1 = 6;
  if (this->_internal_udata1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udata1());
  }

  // int32 udata2 = 7;
  if (this->_internal_udata2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udata2());
  }

  // int32 udata3 = 8;
  if (this->_internal_udata3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udata3());
  }

  // int32 bonues_status = 9;
  if (this->_internal_bonues_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bonues_status());
  }

  // int32 bonues = 10;
  if (this->_internal_bonues() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bonues());
  }

  // int32 days = 11;
  if (this->_internal_days() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserGameInfo::GetClassData() const { return &_class_data_; }


void UserGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserGameInfo*>(&to_msg);
  auto& from = static_cast<const UserGameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserGameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uchip() != 0) {
    _this->_internal_set_uchip(from._internal_uchip());
  }
  if (from._internal_uexp() != 0) {
    _this->_internal_set_uexp(from._internal_uexp());
  }
  if (from._internal_uvip() != 0) {
    _this->_internal_set_uvip(from._internal_uvip());
  }
  if (from._internal_uchip2() != 0) {
    _this->_internal_set_uchip2(from._internal_uchip2());
  }
  if (from._internal_uchip3() != 0) {
    _this->_internal_set_uchip3(from._internal_uchip3());
  }
  if (from._internal_udata1() != 0) {
    _this->_internal_set_udata1(from._internal_udata1());
  }
  if (from._internal_udata2() != 0) {
    _this->_internal_set_udata2(from._internal_udata2());
  }
  if (from._internal_udata3() != 0) {
    _this->_internal_set_udata3(from._internal_udata3());
  }
  if (from._internal_bonues_status() != 0) {
    _this->_internal_set_bonues_status(from._internal_bonues_status());
  }
  if (from._internal_bonues() != 0) {
    _this->_internal_set_bonues(from._internal_bonues());
  }
  if (from._internal_days() != 0) {
    _this->_internal_set_days(from._internal_days());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserGameInfo::CopyFrom(const UserGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameInfo::IsInitialized() const {
  return true;
}

void UserGameInfo::InternalSwap(UserGameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserGameInfo, _impl_.days_)
      + sizeof(UserGameInfo::_impl_.days_)
      - PROTOBUF_FIELD_OFFSET(UserGameInfo, _impl_.uchip_)>(
          reinterpret_cast<char*>(&_impl_.uchip_),
          reinterpret_cast<char*>(&other->_impl_.uchip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[10]);
}

// ===================================================================

class GetUgameInfoRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUgameInfoRes>()._impl_._has_bits_);
  static const ::UserGameInfo& uinfo(const GetUgameInfoRes* msg);
  static void set_has_uinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::UserGameInfo&
GetUgameInfoRes::_Internal::uinfo(const GetUgameInfoRes* msg) {
  return *msg->_impl_.uinfo_;
}
GetUgameInfoRes::GetUgameInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetUgameInfoRes)
}
GetUgameInfoRes::GetUgameInfoRes(const GetUgameInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUgameInfoRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uinfo()) {
    _this->_impl_.uinfo_ = new ::UserGameInfo(*from._impl_.uinfo_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GetUgameInfoRes)
}

inline void GetUgameInfoRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

GetUgameInfoRes::~GetUgameInfoRes() {
  // @@protoc_insertion_point(destructor:GetUgameInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUgameInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uinfo_;
}

void GetUgameInfoRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUgameInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUgameInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uinfo_ != nullptr);
    _impl_.uinfo_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUgameInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserGameInfo uinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUgameInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUgameInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .UserGameInfo uinfo = 2;
  if (_internal_has_uinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uinfo(this),
        _Internal::uinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUgameInfoRes)
  return target;
}

size_t GetUgameInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUgameInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .UserGameInfo uinfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uinfo_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUgameInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUgameInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUgameInfoRes::GetClassData() const { return &_class_data_; }


void GetUgameInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUgameInfoRes*>(&to_msg);
  auto& from = static_cast<const GetUgameInfoRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetUgameInfoRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uinfo()) {
    _this->_internal_mutable_uinfo()->::UserGameInfo::MergeFrom(
        from._internal_uinfo());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUgameInfoRes::CopyFrom(const GetUgameInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUgameInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUgameInfoRes::IsInitialized() const {
  return true;
}

void GetUgameInfoRes::InternalSwap(GetUgameInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUgameInfoRes, _impl_.status_)
      + sizeof(GetUgameInfoRes::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetUgameInfoRes, _impl_.uinfo_)>(
          reinterpret_cast<char*>(&_impl_.uinfo_),
          reinterpret_cast<char*>(&other->_impl_.uinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUgameInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[11]);
}

// ===================================================================

class RecvLoginBonuesRes::_Internal {
 public:
};

RecvLoginBonuesRes::RecvLoginBonuesRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RecvLoginBonuesRes)
}
RecvLoginBonuesRes::RecvLoginBonuesRes(const RecvLoginBonuesRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecvLoginBonuesRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:RecvLoginBonuesRes)
}

inline void RecvLoginBonuesRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecvLoginBonuesRes::~RecvLoginBonuesRes() {
  // @@protoc_insertion_point(destructor:RecvLoginBonuesRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecvLoginBonuesRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvLoginBonuesRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecvLoginBonuesRes::Clear() {
// @@protoc_insertion_point(message_clear_start:RecvLoginBonuesRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvLoginBonuesRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecvLoginBonuesRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecvLoginBonuesRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecvLoginBonuesRes)
  return target;
}

size_t RecvLoginBonuesRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecvLoginBonuesRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvLoginBonuesRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecvLoginBonuesRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvLoginBonuesRes::GetClassData() const { return &_class_data_; }


void RecvLoginBonuesRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecvLoginBonuesRes*>(&to_msg);
  auto& from = static_cast<const RecvLoginBonuesRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RecvLoginBonuesRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvLoginBonuesRes::CopyFrom(const RecvLoginBonuesRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecvLoginBonuesRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvLoginBonuesRes::IsInitialized() const {
  return true;
}

void RecvLoginBonuesRes::InternalSwap(RecvLoginBonuesRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvLoginBonuesRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[12]);
}

// ===================================================================

class WorldChipRankInfo::_Internal {
 public:
};

WorldChipRankInfo::WorldChipRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WorldChipRankInfo)
}
WorldChipRankInfo::WorldChipRankInfo(const WorldChipRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorldChipRankInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.uvip_){}
    , decltype(_impl_.uchip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uface_, &from._impl_.uface_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uchip_) -
    reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.uchip_));
  // @@protoc_insertion_point(copy_constructor:WorldChipRankInfo)
}

inline void WorldChipRankInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){0}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.uvip_){0}
    , decltype(_impl_.uchip_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorldChipRankInfo::~WorldChipRankInfo() {
  // @@protoc_insertion_point(destructor:WorldChipRankInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldChipRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void WorldChipRankInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorldChipRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldChipRankInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.uface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uchip_) -
      reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.uchip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldChipRankInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WorldChipRankInfo.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 uface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uvip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uchip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uchip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldChipRankInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldChipRankInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorldChipRankInfo.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uface(), target);
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usex(), target);
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uvip(), target);
  }

  // int32 uchip = 5;
  if (this->_internal_uchip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_uchip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldChipRankInfo)
  return target;
}

size_t WorldChipRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldChipRankInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uface());
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uvip());
  }

  // int32 uchip = 5;
  if (this->_internal_uchip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldChipRankInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorldChipRankInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldChipRankInfo::GetClassData() const { return &_class_data_; }


void WorldChipRankInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorldChipRankInfo*>(&to_msg);
  auto& from = static_cast<const WorldChipRankInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WorldChipRankInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_uface() != 0) {
    _this->_internal_set_uface(from._internal_uface());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_uvip() != 0) {
    _this->_internal_set_uvip(from._internal_uvip());
  }
  if (from._internal_uchip() != 0) {
    _this->_internal_set_uchip(from._internal_uchip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldChipRankInfo::CopyFrom(const WorldChipRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldChipRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldChipRankInfo::IsInitialized() const {
  return true;
}

void WorldChipRankInfo::InternalSwap(WorldChipRankInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldChipRankInfo, _impl_.uchip_)
      + sizeof(WorldChipRankInfo::_impl_.uchip_)
      - PROTOBUF_FIELD_OFFSET(WorldChipRankInfo, _impl_.uface_)>(
          reinterpret_cast<char*>(&_impl_.uface_),
          reinterpret_cast<char*>(&other->_impl_.uface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldChipRankInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[13]);
}

// ===================================================================

class GetWorldRankUchipRes::_Internal {
 public:
};

GetWorldRankUchipRes::GetWorldRankUchipRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetWorldRankUchipRes)
}
GetWorldRankUchipRes::GetWorldRankUchipRes(const GetWorldRankUchipRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldRankUchipRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_info_){from._impl_.rank_info_}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GetWorldRankUchipRes)
}

inline void GetWorldRankUchipRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_info_){arena}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWorldRankUchipRes::~GetWorldRankUchipRes() {
  // @@protoc_insertion_point(destructor:GetWorldRankUchipRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldRankUchipRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rank_info_.~RepeatedPtrField();
}

void GetWorldRankUchipRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldRankUchipRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetWorldRankUchipRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_info_.Clear();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldRankUchipRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .WorldChipRankInfo rank_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorldRankUchipRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetWorldRankUchipRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // repeated .WorldChipRankInfo rank_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rank_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_rank_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetWorldRankUchipRes)
  return target;
}

size_t GetWorldRankUchipRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetWorldRankUchipRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WorldChipRankInfo rank_info = 2;
  total_size += 1UL * this->_internal_rank_info_size();
  for (const auto& msg : this->_impl_.rank_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldRankUchipRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldRankUchipRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldRankUchipRes::GetClassData() const { return &_class_data_; }


void GetWorldRankUchipRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldRankUchipRes*>(&to_msg);
  auto& from = static_cast<const GetWorldRankUchipRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetWorldRankUchipRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rank_info_.MergeFrom(from._impl_.rank_info_);
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldRankUchipRes::CopyFrom(const GetWorldRankUchipRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetWorldRankUchipRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldRankUchipRes::IsInitialized() const {
  return true;
}

void GetWorldRankUchipRes::InternalSwap(GetWorldRankUchipRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rank_info_.InternalSwap(&other->_impl_.rank_info_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldRankUchipRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[14]);
}

// ===================================================================

class GetSysMsgReq::_Internal {
 public:
};

GetSysMsgReq::GetSysMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetSysMsgReq)
}
GetSysMsgReq::GetSysMsgReq(const GetSysMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSysMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ver_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ver_num_ = from._impl_.ver_num_;
  // @@protoc_insertion_point(copy_constructor:GetSysMsgReq)
}

inline void GetSysMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ver_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSysMsgReq::~GetSysMsgReq() {
  // @@protoc_insertion_point(destructor:GetSysMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSysMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSysMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSysMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSysMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ver_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSysMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ver_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ver_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSysMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSysMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ver_num = 1;
  if (this->_internal_ver_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ver_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSysMsgReq)
  return target;
}

size_t GetSysMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSysMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ver_num = 1;
  if (this->_internal_ver_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ver_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSysMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSysMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSysMsgReq::GetClassData() const { return &_class_data_; }


void GetSysMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSysMsgReq*>(&to_msg);
  auto& from = static_cast<const GetSysMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetSysMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ver_num() != 0) {
    _this->_internal_set_ver_num(from._internal_ver_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSysMsgReq::CopyFrom(const GetSysMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSysMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSysMsgReq::IsInitialized() const {
  return true;
}

void GetSysMsgReq::InternalSwap(GetSysMsgReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ver_num_, other->_impl_.ver_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSysMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[15]);
}

// ===================================================================

class GetSysMsgRes::_Internal {
 public:
};

GetSysMsgRes::GetSysMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetSysMsgRes)
}
GetSysMsgRes::GetSysMsgRes(const GetSysMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSysMsgRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sys_msgs_){from._impl_.sys_msgs_}
    , decltype(_impl_.status_){}
    , decltype(_impl_.ver_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ver_num_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.ver_num_));
  // @@protoc_insertion_point(copy_constructor:GetSysMsgRes)
}

inline void GetSysMsgRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sys_msgs_){arena}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.ver_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSysMsgRes::~GetSysMsgRes() {
  // @@protoc_insertion_point(destructor:GetSysMsgRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSysMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sys_msgs_.~RepeatedPtrField();
}

void GetSysMsgRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSysMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSysMsgRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sys_msgs_.Clear();
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ver_num_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.ver_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSysMsgRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ver_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ver_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sys_msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sys_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSysMsgRes.sys_msgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSysMsgRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSysMsgRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 ver_num = 2;
  if (this->_internal_ver_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ver_num(), target);
  }

  // repeated string sys_msgs = 3;
  for (int i = 0, n = this->_internal_sys_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_sys_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSysMsgRes.sys_msgs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSysMsgRes)
  return target;
}

size_t GetSysMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSysMsgRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sys_msgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sys_msgs_.size());
  for (int i = 0, n = _impl_.sys_msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sys_msgs_.Get(i));
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 ver_num = 2;
  if (this->_internal_ver_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ver_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSysMsgRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSysMsgRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSysMsgRes::GetClassData() const { return &_class_data_; }


void GetSysMsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSysMsgRes*>(&to_msg);
  auto& from = static_cast<const GetSysMsgRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetSysMsgRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sys_msgs_.MergeFrom(from._impl_.sys_msgs_);
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_ver_num() != 0) {
    _this->_internal_set_ver_num(from._internal_ver_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSysMsgRes::CopyFrom(const GetSysMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSysMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSysMsgRes::IsInitialized() const {
  return true;
}

void GetSysMsgRes::InternalSwap(GetSysMsgRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sys_msgs_.InternalSwap(&other->_impl_.sys_msgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSysMsgRes, _impl_.ver_num_)
      + sizeof(GetSysMsgRes::_impl_.ver_num_)
      - PROTOBUF_FIELD_OFFSET(GetSysMsgRes, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSysMsgRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[16]);
}

// ===================================================================

class LoginLogicRes::_Internal {
 public:
};

LoginLogicRes::LoginLogicRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LoginLogicRes)
}
LoginLogicRes::LoginLogicRes(const LoginLogicRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginLogicRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:LoginLogicRes)
}

inline void LoginLogicRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoginLogicRes::~LoginLogicRes() {
  // @@protoc_insertion_point(destructor:LoginLogicRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginLogicRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginLogicRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginLogicRes::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginLogicRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginLogicRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginLogicRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginLogicRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginLogicRes)
  return target;
}

size_t LoginLogicRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginLogicRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginLogicRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginLogicRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginLogicRes::GetClassData() const { return &_class_data_; }


void LoginLogicRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginLogicRes*>(&to_msg);
  auto& from = static_cast<const LoginLogicRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LoginLogicRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginLogicRes::CopyFrom(const LoginLogicRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginLogicRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLogicRes::IsInitialized() const {
  return true;
}

void LoginLogicRes::InternalSwap(LoginLogicRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginLogicRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[17]);
}

// ===================================================================

class EnterZoneReq::_Internal {
 public:
};

EnterZoneReq::EnterZoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterZoneReq)
}
EnterZoneReq::EnterZoneReq(const EnterZoneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterZoneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.zid_ = from._impl_.zid_;
  // @@protoc_insertion_point(copy_constructor:EnterZoneReq)
}

inline void EnterZoneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterZoneReq::~EnterZoneReq() {
  // @@protoc_insertion_point(destructor:EnterZoneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterZoneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterZoneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterZoneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterZoneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterZoneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 zid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterZoneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterZoneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_zid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterZoneReq)
  return target;
}

size_t EnterZoneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterZoneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterZoneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterZoneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterZoneReq::GetClassData() const { return &_class_data_; }


void EnterZoneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterZoneReq*>(&to_msg);
  auto& from = static_cast<const EnterZoneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterZoneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zid() != 0) {
    _this->_internal_set_zid(from._internal_zid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterZoneReq::CopyFrom(const EnterZoneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterZoneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterZoneReq::IsInitialized() const {
  return true;
}

void EnterZoneReq::InternalSwap(EnterZoneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.zid_, other->_impl_.zid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterZoneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[18]);
}

// ===================================================================

class EnterZoneRes::_Internal {
 public:
};

EnterZoneRes::EnterZoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterZoneRes)
}
EnterZoneRes::EnterZoneRes(const EnterZoneRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterZoneRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:EnterZoneRes)
}

inline void EnterZoneRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterZoneRes::~EnterZoneRes() {
  // @@protoc_insertion_point(destructor:EnterZoneRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterZoneRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterZoneRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterZoneRes::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterZoneRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterZoneRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterZoneRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterZoneRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterZoneRes)
  return target;
}

size_t EnterZoneRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterZoneRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterZoneRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterZoneRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterZoneRes::GetClassData() const { return &_class_data_; }


void EnterZoneRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterZoneRes*>(&to_msg);
  auto& from = static_cast<const EnterZoneRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterZoneRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterZoneRes::CopyFrom(const EnterZoneRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterZoneRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterZoneRes::IsInitialized() const {
  return true;
}

void EnterZoneRes::InternalSwap(EnterZoneRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterZoneRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[19]);
}

// ===================================================================

class EnterMatch::_Internal {
 public:
};

EnterMatch::EnterMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterMatch)
}
EnterMatch::EnterMatch(const EnterMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zid_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.side_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zid_, &from._impl_.zid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.side_) -
    reinterpret_cast<char*>(&_impl_.zid_)) + sizeof(_impl_.side_));
  // @@protoc_insertion_point(copy_constructor:EnterMatch)
}

inline void EnterMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zid_){0}
    , decltype(_impl_.matchid_){0}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.side_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterMatch::~EnterMatch() {
  // @@protoc_insertion_point(destructor:EnterMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.side_) -
      reinterpret_cast<char*>(&_impl_.zid_)) + sizeof(_impl_.side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 zid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_zid(), target);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  // int32 seatid = 3;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_seatid(), target);
  }

  // int32 side = 4;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterMatch)
  return target;
}

size_t EnterMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  // int32 seatid = 3;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 side = 4;
  if (this->_internal_side() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_side());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterMatch::GetClassData() const { return &_class_data_; }


void EnterMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterMatch*>(&to_msg);
  auto& from = static_cast<const EnterMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zid() != 0) {
    _this->_internal_set_zid(from._internal_zid());
  }
  if (from._internal_matchid() != 0) {
    _this->_internal_set_matchid(from._internal_matchid());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterMatch::CopyFrom(const EnterMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterMatch::IsInitialized() const {
  return true;
}

void EnterMatch::InternalSwap(EnterMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterMatch, _impl_.side_)
      + sizeof(EnterMatch::_impl_.side_)
      - PROTOBUF_FIELD_OFFSET(EnterMatch, _impl_.zid_)>(
          reinterpret_cast<char*>(&_impl_.zid_),
          reinterpret_cast<char*>(&other->_impl_.zid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[20]);
}

// ===================================================================

class UserArrived::_Internal {
 public:
};

UserArrived::UserArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserArrived)
}
UserArrived::UserArrived(const UserArrived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserArrived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.side_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uface_, &from._impl_.uface_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.side_) -
    reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.side_));
  // @@protoc_insertion_point(copy_constructor:UserArrived)
}

inline void UserArrived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.uface_){0}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.side_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserArrived::~UserArrived() {
  // @@protoc_insertion_point(destructor:UserArrived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserArrived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void UserArrived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:UserArrived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.uface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.side_) -
      reinterpret_cast<char*>(&_impl_.uface_)) + sizeof(_impl_.side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserArrived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserArrived.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 uface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 side = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserArrived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserArrived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserArrived.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uface(), target);
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usex(), target);
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_seatid(), target);
  }

  // int32 side = 5;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserArrived)
  return target;
}

size_t UserArrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserArrived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 uface = 2;
  if (this->_internal_uface() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uface());
  }

  // int32 usex = 3;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 side = 5;
  if (this->_internal_side() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_side());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserArrived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserArrived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserArrived::GetClassData() const { return &_class_data_; }


void UserArrived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserArrived*>(&to_msg);
  auto& from = static_cast<const UserArrived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserArrived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_uface() != 0) {
    _this->_internal_set_uface(from._internal_uface());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserArrived::CopyFrom(const UserArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserArrived::IsInitialized() const {
  return true;
}

void UserArrived::InternalSwap(UserArrived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserArrived, _impl_.side_)
      + sizeof(UserArrived::_impl_.side_)
      - PROTOBUF_FIELD_OFFSET(UserArrived, _impl_.uface_)>(
          reinterpret_cast<char*>(&_impl_.uface_),
          reinterpret_cast<char*>(&other->_impl_.uface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserArrived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[21]);
}

// ===================================================================

class ExitMatchRes::_Internal {
 public:
};

ExitMatchRes::ExitMatchRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExitMatchRes)
}
ExitMatchRes::ExitMatchRes(const ExitMatchRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExitMatchRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:ExitMatchRes)
}

inline void ExitMatchRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExitMatchRes::~ExitMatchRes() {
  // @@protoc_insertion_point(destructor:ExitMatchRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExitMatchRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExitMatchRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExitMatchRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ExitMatchRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExitMatchRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExitMatchRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExitMatchRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExitMatchRes)
  return target;
}

size_t ExitMatchRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExitMatchRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExitMatchRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExitMatchRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExitMatchRes::GetClassData() const { return &_class_data_; }


void ExitMatchRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExitMatchRes*>(&to_msg);
  auto& from = static_cast<const ExitMatchRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExitMatchRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExitMatchRes::CopyFrom(const ExitMatchRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExitMatchRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitMatchRes::IsInitialized() const {
  return true;
}

void ExitMatchRes::InternalSwap(ExitMatchRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExitMatchRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[22]);
}

// ===================================================================

class UserExitMatch::_Internal {
 public:
};

UserExitMatch::UserExitMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserExitMatch)
}
UserExitMatch::UserExitMatch(const UserExitMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserExitMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seatid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seatid_ = from._impl_.seatid_;
  // @@protoc_insertion_point(copy_constructor:UserExitMatch)
}

inline void UserExitMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seatid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserExitMatch::~UserExitMatch() {
  // @@protoc_insertion_point(destructor:UserExitMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserExitMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserExitMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserExitMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:UserExitMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seatid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserExitMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserExitMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserExitMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserExitMatch)
  return target;
}

size_t UserExitMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserExitMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserExitMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserExitMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserExitMatch::GetClassData() const { return &_class_data_; }


void UserExitMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserExitMatch*>(&to_msg);
  auto& from = static_cast<const UserExitMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserExitMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserExitMatch::CopyFrom(const UserExitMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserExitMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExitMatch::IsInitialized() const {
  return true;
}

void UserExitMatch::InternalSwap(UserExitMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.seatid_, other->_impl_.seatid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserExitMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[23]);
}

// ===================================================================

class PlayerMatchInfo::_Internal {
 public:
};

PlayerMatchInfo::PlayerMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerMatchInfo)
}
PlayerMatchInfo::PlayerMatchInfo(const PlayerMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerMatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.heroid_){}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.side_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.heroid_, &from._impl_.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.side_) -
    reinterpret_cast<char*>(&_impl_.heroid_)) + sizeof(_impl_.side_));
  // @@protoc_insertion_point(copy_constructor:PlayerMatchInfo)
}

inline void PlayerMatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.heroid_){0}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.side_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerMatchInfo::~PlayerMatchInfo() {
  // @@protoc_insertion_point(destructor:PlayerMatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerMatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.side_) -
      reinterpret_cast<char*>(&_impl_.heroid_)) + sizeof(_impl_.side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 heroid = 1;
  if (this->_internal_heroid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_heroid(), target);
  }

  // int32 seatid = 2;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_seatid(), target);
  }

  // int32 side = 3;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerMatchInfo)
  return target;
}

size_t PlayerMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 heroid = 1;
  if (this->_internal_heroid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_heroid());
  }

  // int32 seatid = 2;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 side = 3;
  if (this->_internal_side() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_side());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMatchInfo::GetClassData() const { return &_class_data_; }


void PlayerMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerMatchInfo*>(&to_msg);
  auto& from = static_cast<const PlayerMatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerMatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_heroid() != 0) {
    _this->_internal_set_heroid(from._internal_heroid());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMatchInfo::CopyFrom(const PlayerMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMatchInfo::IsInitialized() const {
  return true;
}

void PlayerMatchInfo::InternalSwap(PlayerMatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMatchInfo, _impl_.side_)
      + sizeof(PlayerMatchInfo::_impl_.side_)
      - PROTOBUF_FIELD_OFFSET(PlayerMatchInfo, _impl_.heroid_)>(
          reinterpret_cast<char*>(&_impl_.heroid_),
          reinterpret_cast<char*>(&other->_impl_.heroid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[24]);
}

// ===================================================================

class GameStart::_Internal {
 public:
};

GameStart::GameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameStart)
}
GameStart::GameStart(const GameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_match_info_){from._impl_.players_match_info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameStart)
}

inline void GameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_match_info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameStart::~GameStart() {
  // @@protoc_insertion_point(destructor:GameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_match_info_.~RepeatedPtrField();
}

void GameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_match_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlayerMatchInfo players_match_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players_match_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerMatchInfo players_match_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_match_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_players_match_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStart)
  return target;
}

size_t GameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerMatchInfo players_match_info = 1;
  total_size += 1UL * this->_internal_players_match_info_size();
  for (const auto& msg : this->_impl_.players_match_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStart::GetClassData() const { return &_class_data_; }


void GameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStart*>(&to_msg);
  auto& from = static_cast<const GameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_match_info_.MergeFrom(from._impl_.players_match_info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStart::CopyFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStart::IsInitialized() const {
  return true;
}

void GameStart::InternalSwap(GameStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_match_info_.InternalSwap(&other->_impl_.players_match_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[25]);
}

// ===================================================================

class UdpTest::_Internal {
 public:
};

UdpTest::UdpTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UdpTest)
}
UdpTest::UdpTest(const UdpTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UdpTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UdpTest)
}

inline void UdpTest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UdpTest::~UdpTest() {
  // @@protoc_insertion_point(destructor:UdpTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UdpTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void UdpTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UdpTest::Clear() {
// @@protoc_insertion_point(message_clear_start:UdpTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UdpTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UdpTest.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UdpTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UdpTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UdpTest.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UdpTest)
  return target;
}

size_t UdpTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UdpTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UdpTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UdpTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UdpTest::GetClassData() const { return &_class_data_; }


void UdpTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UdpTest*>(&to_msg);
  auto& from = static_cast<const UdpTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UdpTest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UdpTest::CopyFrom(const UdpTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UdpTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpTest::IsInitialized() const {
  return true;
}

void UdpTest::InternalSwap(UdpTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UdpTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[26]);
}

// ===================================================================

class LoginLogicReq::_Internal {
 public:
};

LoginLogicReq::LoginLogicReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LoginLogicReq)
}
LoginLogicReq::LoginLogicReq(const LoginLogicReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginLogicReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.udp_ip_){}
    , decltype(_impl_.udp_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.udp_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.udp_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_udp_ip().empty()) {
    _this->_impl_.udp_ip_.Set(from._internal_udp_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.udp_port_ = from._impl_.udp_port_;
  // @@protoc_insertion_point(copy_constructor:LoginLogicReq)
}

inline void LoginLogicReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.udp_ip_){}
    , decltype(_impl_.udp_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.udp_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.udp_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginLogicReq::~LoginLogicReq() {
  // @@protoc_insertion_point(destructor:LoginLogicReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginLogicReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.udp_ip_.Destroy();
}

void LoginLogicReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginLogicReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginLogicReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.udp_ip_.ClearToEmpty();
  _impl_.udp_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginLogicReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string udp_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_udp_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LoginLogicReq.udp_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 udp_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginLogicReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginLogicReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string udp_ip = 1;
  if (!this->_internal_udp_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udp_ip().data(), static_cast<int>(this->_internal_udp_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginLogicReq.udp_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_udp_ip(), target);
  }

  // int32 udp_port = 2;
  if (this->_internal_udp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_udp_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginLogicReq)
  return target;
}

size_t LoginLogicReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginLogicReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string udp_ip = 1;
  if (!this->_internal_udp_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udp_ip());
  }

  // int32 udp_port = 2;
  if (this->_internal_udp_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udp_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginLogicReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginLogicReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginLogicReq::GetClassData() const { return &_class_data_; }


void LoginLogicReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginLogicReq*>(&to_msg);
  auto& from = static_cast<const LoginLogicReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LoginLogicReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_udp_ip().empty()) {
    _this->_internal_set_udp_ip(from._internal_udp_ip());
  }
  if (from._internal_udp_port() != 0) {
    _this->_internal_set_udp_port(from._internal_udp_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginLogicReq::CopyFrom(const LoginLogicReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginLogicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLogicReq::IsInitialized() const {
  return true;
}

void LoginLogicReq::InternalSwap(LoginLogicReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.udp_ip_, lhs_arena,
      &other->_impl_.udp_ip_, rhs_arena
  );
  swap(_impl_.udp_port_, other->_impl_.udp_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginLogicReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[27]);
}

// ===================================================================

class OptionEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionEvent>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OptionEvent::OptionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OptionEvent)
}
OptionEvent::OptionEvent(const OptionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.opt_type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seatid_, &from._impl_.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.seatid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:OptionEvent)
}

inline void OptionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.opt_type_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

OptionEvent::~OptionEvent() {
  // @@protoc_insertion_point(destructor:OptionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:OptionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.opt_type_) -
      reinterpret_cast<char*>(&_impl_.seatid_)) + sizeof(_impl_.opt_type_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 opt_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OptionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seatid(), target);
  }

  // int32 opt_type = 2;
  if (this->_internal_opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_opt_type(), target);
  }

  // optional int32 x = 3;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // optional int32 y = 4;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptionEvent)
  return target;
}

size_t OptionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 opt_type = 2;
  if (this->_internal_opt_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt_type());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 x = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionEvent::GetClassData() const { return &_class_data_; }


void OptionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionEvent*>(&to_msg);
  auto& from = static_cast<const OptionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OptionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_opt_type() != 0) {
    _this->_internal_set_opt_type(from._internal_opt_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionEvent::CopyFrom(const OptionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionEvent::IsInitialized() const {
  return true;
}

void OptionEvent::InternalSwap(OptionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionEvent, _impl_.y_)
      + sizeof(OptionEvent::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(OptionEvent, _impl_.seatid_)>(
          reinterpret_cast<char*>(&_impl_.seatid_),
          reinterpret_cast<char*>(&other->_impl_.seatid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[28]);
}

// ===================================================================

class FrameOpts::_Internal {
 public:
};

FrameOpts::FrameOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FrameOpts)
}
FrameOpts::FrameOpts(const FrameOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameOpts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){from._impl_.opts_}
    , decltype(_impl_.frameid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.frameid_ = from._impl_.frameid_;
  // @@protoc_insertion_point(copy_constructor:FrameOpts)
}

inline void FrameOpts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){arena}
    , decltype(_impl_.frameid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrameOpts::~FrameOpts() {
  // @@protoc_insertion_point(destructor:FrameOpts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opts_.~RepeatedPtrField();
}

void FrameOpts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:FrameOpts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opts_.Clear();
  _impl_.frameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameOpts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OptionEvent opts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameOpts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameOpts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .OptionEvent opts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opts_size()); i < n; i++) {
    const auto& repfield = this->_internal_opts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameOpts)
  return target;
}

size_t FrameOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FrameOpts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OptionEvent opts = 2;
  total_size += 1UL * this->_internal_opts_size();
  for (const auto& msg : this->_impl_.opts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameOpts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameOpts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameOpts::GetClassData() const { return &_class_data_; }


void FrameOpts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameOpts*>(&to_msg);
  auto& from = static_cast<const FrameOpts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FrameOpts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opts_.MergeFrom(from._impl_.opts_);
  if (from._internal_frameid() != 0) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameOpts::CopyFrom(const FrameOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FrameOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameOpts::IsInitialized() const {
  return true;
}

void FrameOpts::InternalSwap(FrameOpts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opts_.InternalSwap(&other->_impl_.opts_);
  swap(_impl_.frameid_, other->_impl_.frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameOpts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[29]);
}

// ===================================================================

class LogicFrame::_Internal {
 public:
};

LogicFrame::LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogicFrame)
}
LogicFrame::LogicFrame(const LogicFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unsync_frames_){from._impl_.unsync_frames_}
    , decltype(_impl_.frameid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.frameid_ = from._impl_.frameid_;
  // @@protoc_insertion_point(copy_constructor:LogicFrame)
}

inline void LogicFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unsync_frames_){arena}
    , decltype(_impl_.frameid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogicFrame::~LogicFrame() {
  // @@protoc_insertion_point(destructor:LogicFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unsync_frames_.~RepeatedPtrField();
}

void LogicFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unsync_frames_.Clear();
  _impl_.frameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .FrameOpts unsync_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unsync_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .FrameOpts unsync_frames = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unsync_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_unsync_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicFrame)
  return target;
}

size_t LogicFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FrameOpts unsync_frames = 2;
  total_size += 1UL * this->_internal_unsync_frames_size();
  for (const auto& msg : this->_impl_.unsync_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicFrame::GetClassData() const { return &_class_data_; }


void LogicFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicFrame*>(&to_msg);
  auto& from = static_cast<const LogicFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogicFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unsync_frames_.MergeFrom(from._impl_.unsync_frames_);
  if (from._internal_frameid() != 0) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicFrame::CopyFrom(const LogicFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicFrame::IsInitialized() const {
  return true;
}

void LogicFrame::InternalSwap(LogicFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unsync_frames_.InternalSwap(&other->_impl_.unsync_frames_);
  swap(_impl_.frameid_, other->_impl_.frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[30]);
}

// ===================================================================

class NextFrameOpts::_Internal {
 public:
};

NextFrameOpts::NextFrameOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NextFrameOpts)
}
NextFrameOpts::NextFrameOpts(const NextFrameOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextFrameOpts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){from._impl_.opts_}
    , decltype(_impl_.frameid_){}
    , decltype(_impl_.zid_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.seatid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.frameid_, &from._impl_.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seatid_) -
    reinterpret_cast<char*>(&_impl_.frameid_)) + sizeof(_impl_.seatid_));
  // @@protoc_insertion_point(copy_constructor:NextFrameOpts)
}

inline void NextFrameOpts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){arena}
    , decltype(_impl_.frameid_){0}
    , decltype(_impl_.zid_){0}
    , decltype(_impl_.matchid_){0}
    , decltype(_impl_.seatid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NextFrameOpts::~NextFrameOpts() {
  // @@protoc_insertion_point(destructor:NextFrameOpts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextFrameOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opts_.~RepeatedPtrField();
}

void NextFrameOpts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextFrameOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:NextFrameOpts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opts_.Clear();
  ::memset(&_impl_.frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.seatid_) -
      reinterpret_cast<char*>(&_impl_.frameid_)) + sizeof(_impl_.seatid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextFrameOpts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 zid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OptionEvent opts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextFrameOpts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NextFrameOpts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // int32 zid = 2;
  if (this->_internal_zid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_zid(), target);
  }

  // int32 matchid = 3;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_matchid(), target);
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_seatid(), target);
  }

  // repeated .OptionEvent opts = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opts_size()); i < n; i++) {
    const auto& repfield = this->_internal_opts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NextFrameOpts)
  return target;
}

size_t NextFrameOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NextFrameOpts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OptionEvent opts = 5;
  total_size += 1UL * this->_internal_opts_size();
  for (const auto& msg : this->_impl_.opts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  // int32 zid = 2;
  if (this->_internal_zid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
  }

  // int32 matchid = 3;
  if (this->_internal_matchid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextFrameOpts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextFrameOpts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextFrameOpts::GetClassData() const { return &_class_data_; }


void NextFrameOpts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextFrameOpts*>(&to_msg);
  auto& from = static_cast<const NextFrameOpts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NextFrameOpts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opts_.MergeFrom(from._impl_.opts_);
  if (from._internal_frameid() != 0) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  if (from._internal_zid() != 0) {
    _this->_internal_set_zid(from._internal_zid());
  }
  if (from._internal_matchid() != 0) {
    _this->_internal_set_matchid(from._internal_matchid());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextFrameOpts::CopyFrom(const NextFrameOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NextFrameOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextFrameOpts::IsInitialized() const {
  return true;
}

void NextFrameOpts::InternalSwap(NextFrameOpts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opts_.InternalSwap(&other->_impl_.opts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextFrameOpts, _impl_.seatid_)
      + sizeof(NextFrameOpts::_impl_.seatid_)
      - PROTOBUF_FIELD_OFFSET(NextFrameOpts, _impl_.frameid_)>(
          reinterpret_cast<char*>(&_impl_.frameid_),
          reinterpret_cast<char*>(&other->_impl_.frameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextFrameOpts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GuestLoginReq*
Arena::CreateMaybeMessage< ::GuestLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuestLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UnameLoginReq*
Arena::CreateMaybeMessage< ::UnameLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnameLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UserCenterInfo*
Arena::CreateMaybeMessage< ::UserCenterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserCenterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GuestLoginRes*
Arena::CreateMaybeMessage< ::GuestLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuestLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::UnameLoginRes*
Arena::CreateMaybeMessage< ::UnameLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnameLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::EditProfileReq*
Arena::CreateMaybeMessage< ::EditProfileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EditProfileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EditProfileRes*
Arena::CreateMaybeMessage< ::EditProfileRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EditProfileRes >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountUpgradeReq*
Arena::CreateMaybeMessage< ::AccountUpgradeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountUpgradeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountUpgradeRes*
Arena::CreateMaybeMessage< ::AccountUpgradeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountUpgradeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginOutRes*
Arena::CreateMaybeMessage< ::LoginOutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoginOutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::UserGameInfo*
Arena::CreateMaybeMessage< ::UserGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUgameInfoRes*
Arena::CreateMaybeMessage< ::GetUgameInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetUgameInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::RecvLoginBonuesRes*
Arena::CreateMaybeMessage< ::RecvLoginBonuesRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RecvLoginBonuesRes >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldChipRankInfo*
Arena::CreateMaybeMessage< ::WorldChipRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorldChipRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GetWorldRankUchipRes*
Arena::CreateMaybeMessage< ::GetWorldRankUchipRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetWorldRankUchipRes >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSysMsgReq*
Arena::CreateMaybeMessage< ::GetSysMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSysMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSysMsgRes*
Arena::CreateMaybeMessage< ::GetSysMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSysMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginLogicRes*
Arena::CreateMaybeMessage< ::LoginLogicRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoginLogicRes >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterZoneReq*
Arena::CreateMaybeMessage< ::EnterZoneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterZoneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterZoneRes*
Arena::CreateMaybeMessage< ::EnterZoneRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterZoneRes >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterMatch*
Arena::CreateMaybeMessage< ::EnterMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::UserArrived*
Arena::CreateMaybeMessage< ::UserArrived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserArrived >(arena);
}
template<> PROTOBUF_NOINLINE ::ExitMatchRes*
Arena::CreateMaybeMessage< ::ExitMatchRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExitMatchRes >(arena);
}
template<> PROTOBUF_NOINLINE ::UserExitMatch*
Arena::CreateMaybeMessage< ::UserExitMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserExitMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerMatchInfo*
Arena::CreateMaybeMessage< ::PlayerMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStart*
Arena::CreateMaybeMessage< ::GameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::UdpTest*
Arena::CreateMaybeMessage< ::UdpTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UdpTest >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginLogicReq*
Arena::CreateMaybeMessage< ::LoginLogicReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoginLogicReq >(arena);
}
template<> PROTOBUF_NOINLINE ::OptionEvent*
Arena::CreateMaybeMessage< ::OptionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OptionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::FrameOpts*
Arena::CreateMaybeMessage< ::FrameOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FrameOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicFrame*
Arena::CreateMaybeMessage< ::LogicFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::NextFrameOpts*
Arena::CreateMaybeMessage< ::NextFrameOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NextFrameOpts >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
