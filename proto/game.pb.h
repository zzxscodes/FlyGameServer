// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
class AccountUpgradeReq;
struct AccountUpgradeReqDefaultTypeInternal;
extern AccountUpgradeReqDefaultTypeInternal _AccountUpgradeReq_default_instance_;
class AccountUpgradeRes;
struct AccountUpgradeResDefaultTypeInternal;
extern AccountUpgradeResDefaultTypeInternal _AccountUpgradeRes_default_instance_;
class EditProfileReq;
struct EditProfileReqDefaultTypeInternal;
extern EditProfileReqDefaultTypeInternal _EditProfileReq_default_instance_;
class EditProfileRes;
struct EditProfileResDefaultTypeInternal;
extern EditProfileResDefaultTypeInternal _EditProfileRes_default_instance_;
class EnterMatch;
struct EnterMatchDefaultTypeInternal;
extern EnterMatchDefaultTypeInternal _EnterMatch_default_instance_;
class EnterZoneReq;
struct EnterZoneReqDefaultTypeInternal;
extern EnterZoneReqDefaultTypeInternal _EnterZoneReq_default_instance_;
class EnterZoneRes;
struct EnterZoneResDefaultTypeInternal;
extern EnterZoneResDefaultTypeInternal _EnterZoneRes_default_instance_;
class ExitMatchRes;
struct ExitMatchResDefaultTypeInternal;
extern ExitMatchResDefaultTypeInternal _ExitMatchRes_default_instance_;
class FrameOpts;
struct FrameOptsDefaultTypeInternal;
extern FrameOptsDefaultTypeInternal _FrameOpts_default_instance_;
class GameStart;
struct GameStartDefaultTypeInternal;
extern GameStartDefaultTypeInternal _GameStart_default_instance_;
class GetSysMsgReq;
struct GetSysMsgReqDefaultTypeInternal;
extern GetSysMsgReqDefaultTypeInternal _GetSysMsgReq_default_instance_;
class GetSysMsgRes;
struct GetSysMsgResDefaultTypeInternal;
extern GetSysMsgResDefaultTypeInternal _GetSysMsgRes_default_instance_;
class GetUgameInfoRes;
struct GetUgameInfoResDefaultTypeInternal;
extern GetUgameInfoResDefaultTypeInternal _GetUgameInfoRes_default_instance_;
class GetWorldRankUchipRes;
struct GetWorldRankUchipResDefaultTypeInternal;
extern GetWorldRankUchipResDefaultTypeInternal _GetWorldRankUchipRes_default_instance_;
class GuestLoginReq;
struct GuestLoginReqDefaultTypeInternal;
extern GuestLoginReqDefaultTypeInternal _GuestLoginReq_default_instance_;
class GuestLoginRes;
struct GuestLoginResDefaultTypeInternal;
extern GuestLoginResDefaultTypeInternal _GuestLoginRes_default_instance_;
class LogicFrame;
struct LogicFrameDefaultTypeInternal;
extern LogicFrameDefaultTypeInternal _LogicFrame_default_instance_;
class LoginLogicReq;
struct LoginLogicReqDefaultTypeInternal;
extern LoginLogicReqDefaultTypeInternal _LoginLogicReq_default_instance_;
class LoginLogicRes;
struct LoginLogicResDefaultTypeInternal;
extern LoginLogicResDefaultTypeInternal _LoginLogicRes_default_instance_;
class LoginOutRes;
struct LoginOutResDefaultTypeInternal;
extern LoginOutResDefaultTypeInternal _LoginOutRes_default_instance_;
class NextFrameOpts;
struct NextFrameOptsDefaultTypeInternal;
extern NextFrameOptsDefaultTypeInternal _NextFrameOpts_default_instance_;
class OptionEvent;
struct OptionEventDefaultTypeInternal;
extern OptionEventDefaultTypeInternal _OptionEvent_default_instance_;
class PlayerMatchInfo;
struct PlayerMatchInfoDefaultTypeInternal;
extern PlayerMatchInfoDefaultTypeInternal _PlayerMatchInfo_default_instance_;
class RecvLoginBonuesRes;
struct RecvLoginBonuesResDefaultTypeInternal;
extern RecvLoginBonuesResDefaultTypeInternal _RecvLoginBonuesRes_default_instance_;
class UdpTest;
struct UdpTestDefaultTypeInternal;
extern UdpTestDefaultTypeInternal _UdpTest_default_instance_;
class UnameLoginReq;
struct UnameLoginReqDefaultTypeInternal;
extern UnameLoginReqDefaultTypeInternal _UnameLoginReq_default_instance_;
class UnameLoginRes;
struct UnameLoginResDefaultTypeInternal;
extern UnameLoginResDefaultTypeInternal _UnameLoginRes_default_instance_;
class UserArrived;
struct UserArrivedDefaultTypeInternal;
extern UserArrivedDefaultTypeInternal _UserArrived_default_instance_;
class UserCenterInfo;
struct UserCenterInfoDefaultTypeInternal;
extern UserCenterInfoDefaultTypeInternal _UserCenterInfo_default_instance_;
class UserExitMatch;
struct UserExitMatchDefaultTypeInternal;
extern UserExitMatchDefaultTypeInternal _UserExitMatch_default_instance_;
class UserGameInfo;
struct UserGameInfoDefaultTypeInternal;
extern UserGameInfoDefaultTypeInternal _UserGameInfo_default_instance_;
class WorldChipRankInfo;
struct WorldChipRankInfoDefaultTypeInternal;
extern WorldChipRankInfoDefaultTypeInternal _WorldChipRankInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountUpgradeReq* Arena::CreateMaybeMessage<::AccountUpgradeReq>(Arena*);
template<> ::AccountUpgradeRes* Arena::CreateMaybeMessage<::AccountUpgradeRes>(Arena*);
template<> ::EditProfileReq* Arena::CreateMaybeMessage<::EditProfileReq>(Arena*);
template<> ::EditProfileRes* Arena::CreateMaybeMessage<::EditProfileRes>(Arena*);
template<> ::EnterMatch* Arena::CreateMaybeMessage<::EnterMatch>(Arena*);
template<> ::EnterZoneReq* Arena::CreateMaybeMessage<::EnterZoneReq>(Arena*);
template<> ::EnterZoneRes* Arena::CreateMaybeMessage<::EnterZoneRes>(Arena*);
template<> ::ExitMatchRes* Arena::CreateMaybeMessage<::ExitMatchRes>(Arena*);
template<> ::FrameOpts* Arena::CreateMaybeMessage<::FrameOpts>(Arena*);
template<> ::GameStart* Arena::CreateMaybeMessage<::GameStart>(Arena*);
template<> ::GetSysMsgReq* Arena::CreateMaybeMessage<::GetSysMsgReq>(Arena*);
template<> ::GetSysMsgRes* Arena::CreateMaybeMessage<::GetSysMsgRes>(Arena*);
template<> ::GetUgameInfoRes* Arena::CreateMaybeMessage<::GetUgameInfoRes>(Arena*);
template<> ::GetWorldRankUchipRes* Arena::CreateMaybeMessage<::GetWorldRankUchipRes>(Arena*);
template<> ::GuestLoginReq* Arena::CreateMaybeMessage<::GuestLoginReq>(Arena*);
template<> ::GuestLoginRes* Arena::CreateMaybeMessage<::GuestLoginRes>(Arena*);
template<> ::LogicFrame* Arena::CreateMaybeMessage<::LogicFrame>(Arena*);
template<> ::LoginLogicReq* Arena::CreateMaybeMessage<::LoginLogicReq>(Arena*);
template<> ::LoginLogicRes* Arena::CreateMaybeMessage<::LoginLogicRes>(Arena*);
template<> ::LoginOutRes* Arena::CreateMaybeMessage<::LoginOutRes>(Arena*);
template<> ::NextFrameOpts* Arena::CreateMaybeMessage<::NextFrameOpts>(Arena*);
template<> ::OptionEvent* Arena::CreateMaybeMessage<::OptionEvent>(Arena*);
template<> ::PlayerMatchInfo* Arena::CreateMaybeMessage<::PlayerMatchInfo>(Arena*);
template<> ::RecvLoginBonuesRes* Arena::CreateMaybeMessage<::RecvLoginBonuesRes>(Arena*);
template<> ::UdpTest* Arena::CreateMaybeMessage<::UdpTest>(Arena*);
template<> ::UnameLoginReq* Arena::CreateMaybeMessage<::UnameLoginReq>(Arena*);
template<> ::UnameLoginRes* Arena::CreateMaybeMessage<::UnameLoginRes>(Arena*);
template<> ::UserArrived* Arena::CreateMaybeMessage<::UserArrived>(Arena*);
template<> ::UserCenterInfo* Arena::CreateMaybeMessage<::UserCenterInfo>(Arena*);
template<> ::UserExitMatch* Arena::CreateMaybeMessage<::UserExitMatch>(Arena*);
template<> ::UserGameInfo* Arena::CreateMaybeMessage<::UserGameInfo>(Arena*);
template<> ::WorldChipRankInfo* Arena::CreateMaybeMessage<::WorldChipRankInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Stype : int {
  INVALIDI_STYPE = 0,
  Auth = 1,
  System = 2,
  Logic = 3,
  Stype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Stype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Stype_IsValid(int value);
constexpr Stype Stype_MIN = INVALIDI_STYPE;
constexpr Stype Stype_MAX = Logic;
constexpr int Stype_ARRAYSIZE = Stype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stype_descriptor();
template<typename T>
inline const std::string& Stype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Stype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Stype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Stype_descriptor(), enum_t_value);
}
inline bool Stype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Stype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Stype>(
    Stype_descriptor(), name, value);
}
enum Cmd : int {
  INVALID_CMD = 0,
  eGuestLoginReq = 1,
  eGuestLoginRes = 2,
  eRelogin = 3,
  eUserLostConn = 4,
  eEditProfileReq = 5,
  eEditProfileRes = 6,
  eAccountUpgradeReq = 7,
  eAccountUpgradeRes = 8,
  eUnameLoginReq = 9,
  eUnameLoginRes = 10,
  eLoginOutReq = 11,
  eLoginOutRes = 12,
  eGetUgameInfoReq = 13,
  eGetUgameInfoRes = 14,
  eRecvLoginBonuesReq = 15,
  eRecvLoginBonuesRes = 16,
  eGetWorldRankUchipReq = 17,
  eGetWorldRankUchipRes = 18,
  eGetSysMsgReq = 19,
  eGetSysMsgRes = 20,
  eLoginLogicReq = 21,
  eLoginLogicRes = 22,
  eEnterZoneReq = 23,
  eEnterZoneRes = 24,
  eEnterMatch = 25,
  eUserArrived = 26,
  eExitMatchReq = 27,
  eExitMatchRes = 28,
  eUserExitMatch = 29,
  eGameStart = 30,
  eUdpTest = 31,
  eLogicFrame = 32,
  eNextFrameOpts = 33,
  Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Cmd_IsValid(int value);
constexpr Cmd Cmd_MIN = INVALID_CMD;
constexpr Cmd Cmd_MAX = eNextFrameOpts;
constexpr int Cmd_ARRAYSIZE = Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor();
template<typename T>
inline const std::string& Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cmd_descriptor(), enum_t_value);
}
inline bool Cmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cmd>(
    Cmd_descriptor(), name, value);
}
// ===================================================================

class GuestLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GuestLoginReq) */ {
 public:
  inline GuestLoginReq() : GuestLoginReq(nullptr) {}
  ~GuestLoginReq() override;
  explicit PROTOBUF_CONSTEXPR GuestLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestLoginReq(const GuestLoginReq& from);
  GuestLoginReq(GuestLoginReq&& from) noexcept
    : GuestLoginReq() {
    *this = ::std::move(from);
  }

  inline GuestLoginReq& operator=(const GuestLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestLoginReq& operator=(GuestLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestLoginReq* internal_default_instance() {
    return reinterpret_cast<const GuestLoginReq*>(
               &_GuestLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GuestLoginReq& a, GuestLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestLoginReq& from) {
    GuestLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GuestLoginReq";
  }
  protected:
  explicit GuestLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuestKeyFieldNumber = 1,
  };
  // string guest_key = 1;
  void clear_guest_key();
  const std::string& guest_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guest_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guest_key();
  PROTOBUF_NODISCARD std::string* release_guest_key();
  void set_allocated_guest_key(std::string* guest_key);
  private:
  const std::string& _internal_guest_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guest_key(const std::string& value);
  std::string* _internal_mutable_guest_key();
  public:

  // @@protoc_insertion_point(class_scope:GuestLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guest_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UnameLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnameLoginReq) */ {
 public:
  inline UnameLoginReq() : UnameLoginReq(nullptr) {}
  ~UnameLoginReq() override;
  explicit PROTOBUF_CONSTEXPR UnameLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnameLoginReq(const UnameLoginReq& from);
  UnameLoginReq(UnameLoginReq&& from) noexcept
    : UnameLoginReq() {
    *this = ::std::move(from);
  }

  inline UnameLoginReq& operator=(const UnameLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnameLoginReq& operator=(UnameLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnameLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnameLoginReq* internal_default_instance() {
    return reinterpret_cast<const UnameLoginReq*>(
               &_UnameLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnameLoginReq& a, UnameLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UnameLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnameLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnameLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnameLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnameLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnameLoginReq& from) {
    UnameLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnameLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnameLoginReq";
  }
  protected:
  explicit UnameLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnameFieldNumber = 1,
    kUpwdFieldNumber = 2,
  };
  // string uname = 1;
  void clear_uname();
  const std::string& uname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uname();
  PROTOBUF_NODISCARD std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string upwd = 2;
  void clear_upwd();
  const std::string& upwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upwd();
  PROTOBUF_NODISCARD std::string* release_upwd();
  void set_allocated_upwd(std::string* upwd);
  private:
  const std::string& _internal_upwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upwd(const std::string& value);
  std::string* _internal_mutable_upwd();
  public:

  // @@protoc_insertion_point(class_scope:UnameLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upwd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserCenterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserCenterInfo) */ {
 public:
  inline UserCenterInfo() : UserCenterInfo(nullptr) {}
  ~UserCenterInfo() override;
  explicit PROTOBUF_CONSTEXPR UserCenterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserCenterInfo(const UserCenterInfo& from);
  UserCenterInfo(UserCenterInfo&& from) noexcept
    : UserCenterInfo() {
    *this = ::std::move(from);
  }

  inline UserCenterInfo& operator=(const UserCenterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserCenterInfo& operator=(UserCenterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserCenterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserCenterInfo* internal_default_instance() {
    return reinterpret_cast<const UserCenterInfo*>(
               &_UserCenterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserCenterInfo& a, UserCenterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserCenterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserCenterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserCenterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserCenterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserCenterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserCenterInfo& from) {
    UserCenterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCenterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserCenterInfo";
  }
  protected:
  explicit UserCenterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUfaceFieldNumber = 2,
    kUsexFieldNumber = 3,
    kUvipFieldNumber = 4,
    kUidFieldNumber = 5,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 uface = 2;
  void clear_uface();
  int32_t uface() const;
  void set_uface(int32_t value);
  private:
  int32_t _internal_uface() const;
  void _internal_set_uface(int32_t value);
  public:

  // int32 usex = 3;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 uvip = 4;
  void clear_uvip();
  int32_t uvip() const;
  void set_uvip(int32_t value);
  private:
  int32_t _internal_uvip() const;
  void _internal_set_uvip(int32_t value);
  public:

  // int32 uid = 5;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserCenterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t uface_;
    int32_t usex_;
    int32_t uvip_;
    int32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GuestLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GuestLoginRes) */ {
 public:
  inline GuestLoginRes() : GuestLoginRes(nullptr) {}
  ~GuestLoginRes() override;
  explicit PROTOBUF_CONSTEXPR GuestLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestLoginRes(const GuestLoginRes& from);
  GuestLoginRes(GuestLoginRes&& from) noexcept
    : GuestLoginRes() {
    *this = ::std::move(from);
  }

  inline GuestLoginRes& operator=(const GuestLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestLoginRes& operator=(GuestLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestLoginRes* internal_default_instance() {
    return reinterpret_cast<const GuestLoginRes*>(
               &_GuestLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GuestLoginRes& a, GuestLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestLoginRes& from) {
    GuestLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GuestLoginRes";
  }
  protected:
  explicit GuestLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .UserCenterInfo uinfo = 2;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::UserCenterInfo& uinfo() const;
  PROTOBUF_NODISCARD ::UserCenterInfo* release_uinfo();
  ::UserCenterInfo* mutable_uinfo();
  void set_allocated_uinfo(::UserCenterInfo* uinfo);
  private:
  const ::UserCenterInfo& _internal_uinfo() const;
  ::UserCenterInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::UserCenterInfo* uinfo);
  ::UserCenterInfo* unsafe_arena_release_uinfo();

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GuestLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::UserCenterInfo* uinfo_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UnameLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnameLoginRes) */ {
 public:
  inline UnameLoginRes() : UnameLoginRes(nullptr) {}
  ~UnameLoginRes() override;
  explicit PROTOBUF_CONSTEXPR UnameLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnameLoginRes(const UnameLoginRes& from);
  UnameLoginRes(UnameLoginRes&& from) noexcept
    : UnameLoginRes() {
    *this = ::std::move(from);
  }

  inline UnameLoginRes& operator=(const UnameLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnameLoginRes& operator=(UnameLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnameLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnameLoginRes* internal_default_instance() {
    return reinterpret_cast<const UnameLoginRes*>(
               &_UnameLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnameLoginRes& a, UnameLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UnameLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnameLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnameLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnameLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnameLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnameLoginRes& from) {
    UnameLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnameLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnameLoginRes";
  }
  protected:
  explicit UnameLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .UserCenterInfo uinfo = 2;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::UserCenterInfo& uinfo() const;
  PROTOBUF_NODISCARD ::UserCenterInfo* release_uinfo();
  ::UserCenterInfo* mutable_uinfo();
  void set_allocated_uinfo(::UserCenterInfo* uinfo);
  private:
  const ::UserCenterInfo& _internal_uinfo() const;
  ::UserCenterInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::UserCenterInfo* uinfo);
  ::UserCenterInfo* unsafe_arena_release_uinfo();

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UnameLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::UserCenterInfo* uinfo_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EditProfileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditProfileReq) */ {
 public:
  inline EditProfileReq() : EditProfileReq(nullptr) {}
  ~EditProfileReq() override;
  explicit PROTOBUF_CONSTEXPR EditProfileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditProfileReq(const EditProfileReq& from);
  EditProfileReq(EditProfileReq&& from) noexcept
    : EditProfileReq() {
    *this = ::std::move(from);
  }

  inline EditProfileReq& operator=(const EditProfileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditProfileReq& operator=(EditProfileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditProfileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditProfileReq* internal_default_instance() {
    return reinterpret_cast<const EditProfileReq*>(
               &_EditProfileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EditProfileReq& a, EditProfileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EditProfileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditProfileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditProfileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditProfileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditProfileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditProfileReq& from) {
    EditProfileReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditProfileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditProfileReq";
  }
  protected:
  explicit EditProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUfaceFieldNumber = 2,
    kUsexFieldNumber = 3,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 uface = 2;
  void clear_uface();
  int32_t uface() const;
  void set_uface(int32_t value);
  private:
  int32_t _internal_uface() const;
  void _internal_set_uface(int32_t value);
  public:

  // int32 usex = 3;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditProfileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t uface_;
    int32_t usex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EditProfileRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditProfileRes) */ {
 public:
  inline EditProfileRes() : EditProfileRes(nullptr) {}
  ~EditProfileRes() override;
  explicit PROTOBUF_CONSTEXPR EditProfileRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditProfileRes(const EditProfileRes& from);
  EditProfileRes(EditProfileRes&& from) noexcept
    : EditProfileRes() {
    *this = ::std::move(from);
  }

  inline EditProfileRes& operator=(const EditProfileRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditProfileRes& operator=(EditProfileRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditProfileRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditProfileRes* internal_default_instance() {
    return reinterpret_cast<const EditProfileRes*>(
               &_EditProfileRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EditProfileRes& a, EditProfileRes& b) {
    a.Swap(&b);
  }
  inline void Swap(EditProfileRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditProfileRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditProfileRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditProfileRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditProfileRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditProfileRes& from) {
    EditProfileRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditProfileRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditProfileRes";
  }
  protected:
  explicit EditProfileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditProfileRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class AccountUpgradeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountUpgradeReq) */ {
 public:
  inline AccountUpgradeReq() : AccountUpgradeReq(nullptr) {}
  ~AccountUpgradeReq() override;
  explicit PROTOBUF_CONSTEXPR AccountUpgradeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountUpgradeReq(const AccountUpgradeReq& from);
  AccountUpgradeReq(AccountUpgradeReq&& from) noexcept
    : AccountUpgradeReq() {
    *this = ::std::move(from);
  }

  inline AccountUpgradeReq& operator=(const AccountUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpgradeReq& operator=(AccountUpgradeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountUpgradeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountUpgradeReq* internal_default_instance() {
    return reinterpret_cast<const AccountUpgradeReq*>(
               &_AccountUpgradeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AccountUpgradeReq& a, AccountUpgradeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpgradeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountUpgradeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountUpgradeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountUpgradeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountUpgradeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountUpgradeReq& from) {
    AccountUpgradeReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpgradeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountUpgradeReq";
  }
  protected:
  explicit AccountUpgradeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnameFieldNumber = 1,
    kUpwdMd5FieldNumber = 2,
  };
  // string uname = 1;
  void clear_uname();
  const std::string& uname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uname();
  PROTOBUF_NODISCARD std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string upwd_md5 = 2;
  void clear_upwd_md5();
  const std::string& upwd_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upwd_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upwd_md5();
  PROTOBUF_NODISCARD std::string* release_upwd_md5();
  void set_allocated_upwd_md5(std::string* upwd_md5);
  private:
  const std::string& _internal_upwd_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upwd_md5(const std::string& value);
  std::string* _internal_mutable_upwd_md5();
  public:

  // @@protoc_insertion_point(class_scope:AccountUpgradeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upwd_md5_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class AccountUpgradeRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountUpgradeRes) */ {
 public:
  inline AccountUpgradeRes() : AccountUpgradeRes(nullptr) {}
  ~AccountUpgradeRes() override;
  explicit PROTOBUF_CONSTEXPR AccountUpgradeRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountUpgradeRes(const AccountUpgradeRes& from);
  AccountUpgradeRes(AccountUpgradeRes&& from) noexcept
    : AccountUpgradeRes() {
    *this = ::std::move(from);
  }

  inline AccountUpgradeRes& operator=(const AccountUpgradeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpgradeRes& operator=(AccountUpgradeRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountUpgradeRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountUpgradeRes* internal_default_instance() {
    return reinterpret_cast<const AccountUpgradeRes*>(
               &_AccountUpgradeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AccountUpgradeRes& a, AccountUpgradeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpgradeRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountUpgradeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountUpgradeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountUpgradeRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountUpgradeRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountUpgradeRes& from) {
    AccountUpgradeRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpgradeRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountUpgradeRes";
  }
  protected:
  explicit AccountUpgradeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AccountUpgradeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LoginOutRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginOutRes) */ {
 public:
  inline LoginOutRes() : LoginOutRes(nullptr) {}
  ~LoginOutRes() override;
  explicit PROTOBUF_CONSTEXPR LoginOutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginOutRes(const LoginOutRes& from);
  LoginOutRes(LoginOutRes&& from) noexcept
    : LoginOutRes() {
    *this = ::std::move(from);
  }

  inline LoginOutRes& operator=(const LoginOutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginOutRes& operator=(LoginOutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginOutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginOutRes* internal_default_instance() {
    return reinterpret_cast<const LoginOutRes*>(
               &_LoginOutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LoginOutRes& a, LoginOutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginOutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginOutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginOutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginOutRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginOutRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginOutRes& from) {
    LoginOutRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginOutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginOutRes";
  }
  protected:
  explicit LoginOutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LoginOutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserGameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserGameInfo) */ {
 public:
  inline UserGameInfo() : UserGameInfo(nullptr) {}
  ~UserGameInfo() override;
  explicit PROTOBUF_CONSTEXPR UserGameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserGameInfo(const UserGameInfo& from);
  UserGameInfo(UserGameInfo&& from) noexcept
    : UserGameInfo() {
    *this = ::std::move(from);
  }

  inline UserGameInfo& operator=(const UserGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGameInfo& operator=(UserGameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserGameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserGameInfo* internal_default_instance() {
    return reinterpret_cast<const UserGameInfo*>(
               &_UserGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserGameInfo& a, UserGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserGameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserGameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserGameInfo& from) {
    UserGameInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserGameInfo";
  }
  protected:
  explicit UserGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUchipFieldNumber = 1,
    kUexpFieldNumber = 2,
    kUvipFieldNumber = 3,
    kUchip2FieldNumber = 4,
    kUchip3FieldNumber = 5,
    kUdata1FieldNumber = 6,
    kUdata2FieldNumber = 7,
    kUdata3FieldNumber = 8,
    kBonuesStatusFieldNumber = 9,
    kBonuesFieldNumber = 10,
    kDaysFieldNumber = 11,
  };
  // int32 uchip = 1;
  void clear_uchip();
  int32_t uchip() const;
  void set_uchip(int32_t value);
  private:
  int32_t _internal_uchip() const;
  void _internal_set_uchip(int32_t value);
  public:

  // int32 uexp = 2;
  void clear_uexp();
  int32_t uexp() const;
  void set_uexp(int32_t value);
  private:
  int32_t _internal_uexp() const;
  void _internal_set_uexp(int32_t value);
  public:

  // int32 uvip = 3;
  void clear_uvip();
  int32_t uvip() const;
  void set_uvip(int32_t value);
  private:
  int32_t _internal_uvip() const;
  void _internal_set_uvip(int32_t value);
  public:

  // int32 uchip2 = 4;
  void clear_uchip2();
  int32_t uchip2() const;
  void set_uchip2(int32_t value);
  private:
  int32_t _internal_uchip2() const;
  void _internal_set_uchip2(int32_t value);
  public:

  // int32 uchip3 = 5;
  void clear_uchip3();
  int32_t uchip3() const;
  void set_uchip3(int32_t value);
  private:
  int32_t _internal_uchip3() const;
  void _internal_set_uchip3(int32_t value);
  public:

  // int32 udata1 = 6;
  void clear_udata1();
  int32_t udata1() const;
  void set_udata1(int32_t value);
  private:
  int32_t _internal_udata1() const;
  void _internal_set_udata1(int32_t value);
  public:

  // int32 udata2 = 7;
  void clear_udata2();
  int32_t udata2() const;
  void set_udata2(int32_t value);
  private:
  int32_t _internal_udata2() const;
  void _internal_set_udata2(int32_t value);
  public:

  // int32 udata3 = 8;
  void clear_udata3();
  int32_t udata3() const;
  void set_udata3(int32_t value);
  private:
  int32_t _internal_udata3() const;
  void _internal_set_udata3(int32_t value);
  public:

  // int32 bonues_status = 9;
  void clear_bonues_status();
  int32_t bonues_status() const;
  void set_bonues_status(int32_t value);
  private:
  int32_t _internal_bonues_status() const;
  void _internal_set_bonues_status(int32_t value);
  public:

  // int32 bonues = 10;
  void clear_bonues();
  int32_t bonues() const;
  void set_bonues(int32_t value);
  private:
  int32_t _internal_bonues() const;
  void _internal_set_bonues(int32_t value);
  public:

  // int32 days = 11;
  void clear_days();
  int32_t days() const;
  void set_days(int32_t value);
  private:
  int32_t _internal_days() const;
  void _internal_set_days(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t uchip_;
    int32_t uexp_;
    int32_t uvip_;
    int32_t uchip2_;
    int32_t uchip3_;
    int32_t udata1_;
    int32_t udata2_;
    int32_t udata3_;
    int32_t bonues_status_;
    int32_t bonues_;
    int32_t days_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetUgameInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetUgameInfoRes) */ {
 public:
  inline GetUgameInfoRes() : GetUgameInfoRes(nullptr) {}
  ~GetUgameInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetUgameInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUgameInfoRes(const GetUgameInfoRes& from);
  GetUgameInfoRes(GetUgameInfoRes&& from) noexcept
    : GetUgameInfoRes() {
    *this = ::std::move(from);
  }

  inline GetUgameInfoRes& operator=(const GetUgameInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUgameInfoRes& operator=(GetUgameInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUgameInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUgameInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetUgameInfoRes*>(
               &_GetUgameInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetUgameInfoRes& a, GetUgameInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUgameInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUgameInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUgameInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUgameInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUgameInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUgameInfoRes& from) {
    GetUgameInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUgameInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetUgameInfoRes";
  }
  protected:
  explicit GetUgameInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .UserGameInfo uinfo = 2;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::UserGameInfo& uinfo() const;
  PROTOBUF_NODISCARD ::UserGameInfo* release_uinfo();
  ::UserGameInfo* mutable_uinfo();
  void set_allocated_uinfo(::UserGameInfo* uinfo);
  private:
  const ::UserGameInfo& _internal_uinfo() const;
  ::UserGameInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::UserGameInfo* uinfo);
  ::UserGameInfo* unsafe_arena_release_uinfo();

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetUgameInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::UserGameInfo* uinfo_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class RecvLoginBonuesRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecvLoginBonuesRes) */ {
 public:
  inline RecvLoginBonuesRes() : RecvLoginBonuesRes(nullptr) {}
  ~RecvLoginBonuesRes() override;
  explicit PROTOBUF_CONSTEXPR RecvLoginBonuesRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecvLoginBonuesRes(const RecvLoginBonuesRes& from);
  RecvLoginBonuesRes(RecvLoginBonuesRes&& from) noexcept
    : RecvLoginBonuesRes() {
    *this = ::std::move(from);
  }

  inline RecvLoginBonuesRes& operator=(const RecvLoginBonuesRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvLoginBonuesRes& operator=(RecvLoginBonuesRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecvLoginBonuesRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecvLoginBonuesRes* internal_default_instance() {
    return reinterpret_cast<const RecvLoginBonuesRes*>(
               &_RecvLoginBonuesRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecvLoginBonuesRes& a, RecvLoginBonuesRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvLoginBonuesRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvLoginBonuesRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecvLoginBonuesRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecvLoginBonuesRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecvLoginBonuesRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecvLoginBonuesRes& from) {
    RecvLoginBonuesRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvLoginBonuesRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecvLoginBonuesRes";
  }
  protected:
  explicit RecvLoginBonuesRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RecvLoginBonuesRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class WorldChipRankInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldChipRankInfo) */ {
 public:
  inline WorldChipRankInfo() : WorldChipRankInfo(nullptr) {}
  ~WorldChipRankInfo() override;
  explicit PROTOBUF_CONSTEXPR WorldChipRankInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldChipRankInfo(const WorldChipRankInfo& from);
  WorldChipRankInfo(WorldChipRankInfo&& from) noexcept
    : WorldChipRankInfo() {
    *this = ::std::move(from);
  }

  inline WorldChipRankInfo& operator=(const WorldChipRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldChipRankInfo& operator=(WorldChipRankInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldChipRankInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldChipRankInfo* internal_default_instance() {
    return reinterpret_cast<const WorldChipRankInfo*>(
               &_WorldChipRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WorldChipRankInfo& a, WorldChipRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldChipRankInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldChipRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldChipRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldChipRankInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldChipRankInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldChipRankInfo& from) {
    WorldChipRankInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldChipRankInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldChipRankInfo";
  }
  protected:
  explicit WorldChipRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUfaceFieldNumber = 2,
    kUsexFieldNumber = 3,
    kUvipFieldNumber = 4,
    kUchipFieldNumber = 5,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 uface = 2;
  void clear_uface();
  int32_t uface() const;
  void set_uface(int32_t value);
  private:
  int32_t _internal_uface() const;
  void _internal_set_uface(int32_t value);
  public:

  // int32 usex = 3;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 uvip = 4;
  void clear_uvip();
  int32_t uvip() const;
  void set_uvip(int32_t value);
  private:
  int32_t _internal_uvip() const;
  void _internal_set_uvip(int32_t value);
  public:

  // int32 uchip = 5;
  void clear_uchip();
  int32_t uchip() const;
  void set_uchip(int32_t value);
  private:
  int32_t _internal_uchip() const;
  void _internal_set_uchip(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WorldChipRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t uface_;
    int32_t usex_;
    int32_t uvip_;
    int32_t uchip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetWorldRankUchipRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetWorldRankUchipRes) */ {
 public:
  inline GetWorldRankUchipRes() : GetWorldRankUchipRes(nullptr) {}
  ~GetWorldRankUchipRes() override;
  explicit PROTOBUF_CONSTEXPR GetWorldRankUchipRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldRankUchipRes(const GetWorldRankUchipRes& from);
  GetWorldRankUchipRes(GetWorldRankUchipRes&& from) noexcept
    : GetWorldRankUchipRes() {
    *this = ::std::move(from);
  }

  inline GetWorldRankUchipRes& operator=(const GetWorldRankUchipRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldRankUchipRes& operator=(GetWorldRankUchipRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldRankUchipRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldRankUchipRes* internal_default_instance() {
    return reinterpret_cast<const GetWorldRankUchipRes*>(
               &_GetWorldRankUchipRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetWorldRankUchipRes& a, GetWorldRankUchipRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldRankUchipRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldRankUchipRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldRankUchipRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldRankUchipRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldRankUchipRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldRankUchipRes& from) {
    GetWorldRankUchipRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldRankUchipRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetWorldRankUchipRes";
  }
  protected:
  explicit GetWorldRankUchipRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankInfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .WorldChipRankInfo rank_info = 2;
  int rank_info_size() const;
  private:
  int _internal_rank_info_size() const;
  public:
  void clear_rank_info();
  ::WorldChipRankInfo* mutable_rank_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldChipRankInfo >*
      mutable_rank_info();
  private:
  const ::WorldChipRankInfo& _internal_rank_info(int index) const;
  ::WorldChipRankInfo* _internal_add_rank_info();
  public:
  const ::WorldChipRankInfo& rank_info(int index) const;
  ::WorldChipRankInfo* add_rank_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldChipRankInfo >&
      rank_info() const;

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetWorldRankUchipRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldChipRankInfo > rank_info_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetSysMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSysMsgReq) */ {
 public:
  inline GetSysMsgReq() : GetSysMsgReq(nullptr) {}
  ~GetSysMsgReq() override;
  explicit PROTOBUF_CONSTEXPR GetSysMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSysMsgReq(const GetSysMsgReq& from);
  GetSysMsgReq(GetSysMsgReq&& from) noexcept
    : GetSysMsgReq() {
    *this = ::std::move(from);
  }

  inline GetSysMsgReq& operator=(const GetSysMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSysMsgReq& operator=(GetSysMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSysMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSysMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetSysMsgReq*>(
               &_GetSysMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetSysMsgReq& a, GetSysMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSysMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSysMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSysMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSysMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSysMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSysMsgReq& from) {
    GetSysMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSysMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSysMsgReq";
  }
  protected:
  explicit GetSysMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerNumFieldNumber = 1,
  };
  // int32 ver_num = 1;
  void clear_ver_num();
  int32_t ver_num() const;
  void set_ver_num(int32_t value);
  private:
  int32_t _internal_ver_num() const;
  void _internal_set_ver_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetSysMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t ver_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetSysMsgRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSysMsgRes) */ {
 public:
  inline GetSysMsgRes() : GetSysMsgRes(nullptr) {}
  ~GetSysMsgRes() override;
  explicit PROTOBUF_CONSTEXPR GetSysMsgRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSysMsgRes(const GetSysMsgRes& from);
  GetSysMsgRes(GetSysMsgRes&& from) noexcept
    : GetSysMsgRes() {
    *this = ::std::move(from);
  }

  inline GetSysMsgRes& operator=(const GetSysMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSysMsgRes& operator=(GetSysMsgRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSysMsgRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSysMsgRes* internal_default_instance() {
    return reinterpret_cast<const GetSysMsgRes*>(
               &_GetSysMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetSysMsgRes& a, GetSysMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSysMsgRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSysMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSysMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSysMsgRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSysMsgRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSysMsgRes& from) {
    GetSysMsgRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSysMsgRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSysMsgRes";
  }
  protected:
  explicit GetSysMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysMsgsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kVerNumFieldNumber = 2,
  };
  // repeated string sys_msgs = 3;
  int sys_msgs_size() const;
  private:
  int _internal_sys_msgs_size() const;
  public:
  void clear_sys_msgs();
  const std::string& sys_msgs(int index) const;
  std::string* mutable_sys_msgs(int index);
  void set_sys_msgs(int index, const std::string& value);
  void set_sys_msgs(int index, std::string&& value);
  void set_sys_msgs(int index, const char* value);
  void set_sys_msgs(int index, const char* value, size_t size);
  std::string* add_sys_msgs();
  void add_sys_msgs(const std::string& value);
  void add_sys_msgs(std::string&& value);
  void add_sys_msgs(const char* value);
  void add_sys_msgs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sys_msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sys_msgs();
  private:
  const std::string& _internal_sys_msgs(int index) const;
  std::string* _internal_add_sys_msgs();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // int32 ver_num = 2;
  void clear_ver_num();
  int32_t ver_num() const;
  void set_ver_num(int32_t value);
  private:
  int32_t _internal_ver_num() const;
  void _internal_set_ver_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetSysMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sys_msgs_;
    int32_t status_;
    int32_t ver_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LoginLogicRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginLogicRes) */ {
 public:
  inline LoginLogicRes() : LoginLogicRes(nullptr) {}
  ~LoginLogicRes() override;
  explicit PROTOBUF_CONSTEXPR LoginLogicRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginLogicRes(const LoginLogicRes& from);
  LoginLogicRes(LoginLogicRes&& from) noexcept
    : LoginLogicRes() {
    *this = ::std::move(from);
  }

  inline LoginLogicRes& operator=(const LoginLogicRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginLogicRes& operator=(LoginLogicRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginLogicRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginLogicRes* internal_default_instance() {
    return reinterpret_cast<const LoginLogicRes*>(
               &_LoginLogicRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LoginLogicRes& a, LoginLogicRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginLogicRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginLogicRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginLogicRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginLogicRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginLogicRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginLogicRes& from) {
    LoginLogicRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginLogicRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginLogicRes";
  }
  protected:
  explicit LoginLogicRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LoginLogicRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterZoneReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterZoneReq) */ {
 public:
  inline EnterZoneReq() : EnterZoneReq(nullptr) {}
  ~EnterZoneReq() override;
  explicit PROTOBUF_CONSTEXPR EnterZoneReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterZoneReq(const EnterZoneReq& from);
  EnterZoneReq(EnterZoneReq&& from) noexcept
    : EnterZoneReq() {
    *this = ::std::move(from);
  }

  inline EnterZoneReq& operator=(const EnterZoneReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterZoneReq& operator=(EnterZoneReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterZoneReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterZoneReq* internal_default_instance() {
    return reinterpret_cast<const EnterZoneReq*>(
               &_EnterZoneReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EnterZoneReq& a, EnterZoneReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterZoneReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterZoneReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterZoneReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterZoneReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterZoneReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterZoneReq& from) {
    EnterZoneReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterZoneReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterZoneReq";
  }
  protected:
  explicit EnterZoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZidFieldNumber = 1,
  };
  // int32 zid = 1;
  void clear_zid();
  int32_t zid() const;
  void set_zid(int32_t value);
  private:
  int32_t _internal_zid() const;
  void _internal_set_zid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EnterZoneReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t zid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterZoneRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterZoneRes) */ {
 public:
  inline EnterZoneRes() : EnterZoneRes(nullptr) {}
  ~EnterZoneRes() override;
  explicit PROTOBUF_CONSTEXPR EnterZoneRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterZoneRes(const EnterZoneRes& from);
  EnterZoneRes(EnterZoneRes&& from) noexcept
    : EnterZoneRes() {
    *this = ::std::move(from);
  }

  inline EnterZoneRes& operator=(const EnterZoneRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterZoneRes& operator=(EnterZoneRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterZoneRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterZoneRes* internal_default_instance() {
    return reinterpret_cast<const EnterZoneRes*>(
               &_EnterZoneRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EnterZoneRes& a, EnterZoneRes& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterZoneRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterZoneRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterZoneRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterZoneRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterZoneRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterZoneRes& from) {
    EnterZoneRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterZoneRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterZoneRes";
  }
  protected:
  explicit EnterZoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EnterZoneRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterMatch) */ {
 public:
  inline EnterMatch() : EnterMatch(nullptr) {}
  ~EnterMatch() override;
  explicit PROTOBUF_CONSTEXPR EnterMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterMatch(const EnterMatch& from);
  EnterMatch(EnterMatch&& from) noexcept
    : EnterMatch() {
    *this = ::std::move(from);
  }

  inline EnterMatch& operator=(const EnterMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterMatch& operator=(EnterMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterMatch* internal_default_instance() {
    return reinterpret_cast<const EnterMatch*>(
               &_EnterMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(EnterMatch& a, EnterMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterMatch& from) {
    EnterMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterMatch";
  }
  protected:
  explicit EnterMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZidFieldNumber = 1,
    kMatchidFieldNumber = 2,
    kSeatidFieldNumber = 3,
    kSideFieldNumber = 4,
  };
  // int32 zid = 1;
  void clear_zid();
  int32_t zid() const;
  void set_zid(int32_t value);
  private:
  int32_t _internal_zid() const;
  void _internal_set_zid(int32_t value);
  public:

  // int32 matchid = 2;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // int32 seatid = 3;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 side = 4;
  void clear_side();
  int32_t side() const;
  void set_side(int32_t value);
  private:
  int32_t _internal_side() const;
  void _internal_set_side(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EnterMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t zid_;
    int32_t matchid_;
    int32_t seatid_;
    int32_t side_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserArrived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserArrived) */ {
 public:
  inline UserArrived() : UserArrived(nullptr) {}
  ~UserArrived() override;
  explicit PROTOBUF_CONSTEXPR UserArrived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserArrived(const UserArrived& from);
  UserArrived(UserArrived&& from) noexcept
    : UserArrived() {
    *this = ::std::move(from);
  }

  inline UserArrived& operator=(const UserArrived& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserArrived& operator=(UserArrived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserArrived& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserArrived* internal_default_instance() {
    return reinterpret_cast<const UserArrived*>(
               &_UserArrived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UserArrived& a, UserArrived& b) {
    a.Swap(&b);
  }
  inline void Swap(UserArrived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserArrived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserArrived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserArrived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserArrived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserArrived& from) {
    UserArrived::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserArrived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserArrived";
  }
  protected:
  explicit UserArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUfaceFieldNumber = 2,
    kUsexFieldNumber = 3,
    kSeatidFieldNumber = 4,
    kSideFieldNumber = 5,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 uface = 2;
  void clear_uface();
  int32_t uface() const;
  void set_uface(int32_t value);
  private:
  int32_t _internal_uface() const;
  void _internal_set_uface(int32_t value);
  public:

  // int32 usex = 3;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 seatid = 4;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 side = 5;
  void clear_side();
  int32_t side() const;
  void set_side(int32_t value);
  private:
  int32_t _internal_side() const;
  void _internal_set_side(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserArrived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t uface_;
    int32_t usex_;
    int32_t seatid_;
    int32_t side_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class ExitMatchRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExitMatchRes) */ {
 public:
  inline ExitMatchRes() : ExitMatchRes(nullptr) {}
  ~ExitMatchRes() override;
  explicit PROTOBUF_CONSTEXPR ExitMatchRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExitMatchRes(const ExitMatchRes& from);
  ExitMatchRes(ExitMatchRes&& from) noexcept
    : ExitMatchRes() {
    *this = ::std::move(from);
  }

  inline ExitMatchRes& operator=(const ExitMatchRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitMatchRes& operator=(ExitMatchRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExitMatchRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExitMatchRes* internal_default_instance() {
    return reinterpret_cast<const ExitMatchRes*>(
               &_ExitMatchRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ExitMatchRes& a, ExitMatchRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitMatchRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExitMatchRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExitMatchRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExitMatchRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExitMatchRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExitMatchRes& from) {
    ExitMatchRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExitMatchRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExitMatchRes";
  }
  protected:
  explicit ExitMatchRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ExitMatchRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserExitMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserExitMatch) */ {
 public:
  inline UserExitMatch() : UserExitMatch(nullptr) {}
  ~UserExitMatch() override;
  explicit PROTOBUF_CONSTEXPR UserExitMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserExitMatch(const UserExitMatch& from);
  UserExitMatch(UserExitMatch&& from) noexcept
    : UserExitMatch() {
    *this = ::std::move(from);
  }

  inline UserExitMatch& operator=(const UserExitMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserExitMatch& operator=(UserExitMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserExitMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserExitMatch* internal_default_instance() {
    return reinterpret_cast<const UserExitMatch*>(
               &_UserExitMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UserExitMatch& a, UserExitMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(UserExitMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserExitMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserExitMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserExitMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserExitMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserExitMatch& from) {
    UserExitMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserExitMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserExitMatch";
  }
  protected:
  explicit UserExitMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatidFieldNumber = 1,
  };
  // int32 seatid = 1;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserExitMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seatid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class PlayerMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerMatchInfo) */ {
 public:
  inline PlayerMatchInfo() : PlayerMatchInfo(nullptr) {}
  ~PlayerMatchInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMatchInfo(const PlayerMatchInfo& from);
  PlayerMatchInfo(PlayerMatchInfo&& from) noexcept
    : PlayerMatchInfo() {
    *this = ::std::move(from);
  }

  inline PlayerMatchInfo& operator=(const PlayerMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMatchInfo& operator=(PlayerMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMatchInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerMatchInfo*>(
               &_PlayerMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PlayerMatchInfo& a, PlayerMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerMatchInfo& from) {
    PlayerMatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerMatchInfo";
  }
  protected:
  explicit PlayerMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroidFieldNumber = 1,
    kSeatidFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // int32 heroid = 1;
  void clear_heroid();
  int32_t heroid() const;
  void set_heroid(int32_t value);
  private:
  int32_t _internal_heroid() const;
  void _internal_set_heroid(int32_t value);
  public:

  // int32 seatid = 2;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 side = 3;
  void clear_side();
  int32_t side() const;
  void set_side(int32_t value);
  private:
  int32_t _internal_side() const;
  void _internal_set_side(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t heroid_;
    int32_t seatid_;
    int32_t side_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStart) */ {
 public:
  inline GameStart() : GameStart(nullptr) {}
  ~GameStart() override;
  explicit PROTOBUF_CONSTEXPR GameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStart(const GameStart& from);
  GameStart(GameStart&& from) noexcept
    : GameStart() {
    *this = ::std::move(from);
  }

  inline GameStart& operator=(const GameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStart& operator=(GameStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStart* internal_default_instance() {
    return reinterpret_cast<const GameStart*>(
               &_GameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GameStart& a, GameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStart& from) {
    GameStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStart";
  }
  protected:
  explicit GameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersMatchInfoFieldNumber = 1,
  };
  // repeated .PlayerMatchInfo players_match_info = 1;
  int players_match_info_size() const;
  private:
  int _internal_players_match_info_size() const;
  public:
  void clear_players_match_info();
  ::PlayerMatchInfo* mutable_players_match_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMatchInfo >*
      mutable_players_match_info();
  private:
  const ::PlayerMatchInfo& _internal_players_match_info(int index) const;
  ::PlayerMatchInfo* _internal_add_players_match_info();
  public:
  const ::PlayerMatchInfo& players_match_info(int index) const;
  ::PlayerMatchInfo* add_players_match_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMatchInfo >&
      players_match_info() const;

  // @@protoc_insertion_point(class_scope:GameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMatchInfo > players_match_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UdpTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UdpTest) */ {
 public:
  inline UdpTest() : UdpTest(nullptr) {}
  ~UdpTest() override;
  explicit PROTOBUF_CONSTEXPR UdpTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UdpTest(const UdpTest& from);
  UdpTest(UdpTest&& from) noexcept
    : UdpTest() {
    *this = ::std::move(from);
  }

  inline UdpTest& operator=(const UdpTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UdpTest& operator=(UdpTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UdpTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UdpTest* internal_default_instance() {
    return reinterpret_cast<const UdpTest*>(
               &_UdpTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UdpTest& a, UdpTest& b) {
    a.Swap(&b);
  }
  inline void Swap(UdpTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UdpTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UdpTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UdpTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UdpTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UdpTest& from) {
    UdpTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UdpTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UdpTest";
  }
  protected:
  explicit UdpTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:UdpTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LoginLogicReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginLogicReq) */ {
 public:
  inline LoginLogicReq() : LoginLogicReq(nullptr) {}
  ~LoginLogicReq() override;
  explicit PROTOBUF_CONSTEXPR LoginLogicReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginLogicReq(const LoginLogicReq& from);
  LoginLogicReq(LoginLogicReq&& from) noexcept
    : LoginLogicReq() {
    *this = ::std::move(from);
  }

  inline LoginLogicReq& operator=(const LoginLogicReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginLogicReq& operator=(LoginLogicReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginLogicReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginLogicReq* internal_default_instance() {
    return reinterpret_cast<const LoginLogicReq*>(
               &_LoginLogicReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LoginLogicReq& a, LoginLogicReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginLogicReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginLogicReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginLogicReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginLogicReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginLogicReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginLogicReq& from) {
    LoginLogicReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginLogicReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginLogicReq";
  }
  protected:
  explicit LoginLogicReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdpIpFieldNumber = 1,
    kUdpPortFieldNumber = 2,
  };
  // string udp_ip = 1;
  void clear_udp_ip();
  const std::string& udp_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_udp_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_udp_ip();
  PROTOBUF_NODISCARD std::string* release_udp_ip();
  void set_allocated_udp_ip(std::string* udp_ip);
  private:
  const std::string& _internal_udp_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udp_ip(const std::string& value);
  std::string* _internal_mutable_udp_ip();
  public:

  // int32 udp_port = 2;
  void clear_udp_port();
  int32_t udp_port() const;
  void set_udp_port(int32_t value);
  private:
  int32_t _internal_udp_port() const;
  void _internal_set_udp_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LoginLogicReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udp_ip_;
    int32_t udp_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class OptionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OptionEvent) */ {
 public:
  inline OptionEvent() : OptionEvent(nullptr) {}
  ~OptionEvent() override;
  explicit PROTOBUF_CONSTEXPR OptionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionEvent(const OptionEvent& from);
  OptionEvent(OptionEvent&& from) noexcept
    : OptionEvent() {
    *this = ::std::move(from);
  }

  inline OptionEvent& operator=(const OptionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionEvent& operator=(OptionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionEvent* internal_default_instance() {
    return reinterpret_cast<const OptionEvent*>(
               &_OptionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OptionEvent& a, OptionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionEvent& from) {
    OptionEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OptionEvent";
  }
  protected:
  explicit OptionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatidFieldNumber = 1,
    kOptTypeFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 seatid = 1;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 opt_type = 2;
  void clear_opt_type();
  int32_t opt_type() const;
  void set_opt_type(int32_t value);
  private:
  int32_t _internal_opt_type() const;
  void _internal_set_opt_type(int32_t value);
  public:

  // optional int32 x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OptionEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t seatid_;
    int32_t opt_type_;
    int32_t x_;
    int32_t y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class FrameOpts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameOpts) */ {
 public:
  inline FrameOpts() : FrameOpts(nullptr) {}
  ~FrameOpts() override;
  explicit PROTOBUF_CONSTEXPR FrameOpts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameOpts(const FrameOpts& from);
  FrameOpts(FrameOpts&& from) noexcept
    : FrameOpts() {
    *this = ::std::move(from);
  }

  inline FrameOpts& operator=(const FrameOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameOpts& operator=(FrameOpts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameOpts& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameOpts* internal_default_instance() {
    return reinterpret_cast<const FrameOpts*>(
               &_FrameOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FrameOpts& a, FrameOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameOpts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameOpts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameOpts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameOpts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameOpts& from) {
    FrameOpts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameOpts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameOpts";
  }
  protected:
  explicit FrameOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptsFieldNumber = 2,
    kFrameidFieldNumber = 1,
  };
  // repeated .OptionEvent opts = 2;
  int opts_size() const;
  private:
  int _internal_opts_size() const;
  public:
  void clear_opts();
  ::OptionEvent* mutable_opts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
      mutable_opts();
  private:
  const ::OptionEvent& _internal_opts(int index) const;
  ::OptionEvent* _internal_add_opts();
  public:
  const ::OptionEvent& opts(int index) const;
  ::OptionEvent* add_opts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
      opts() const;

  // int32 frameid = 1;
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameOpts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent > opts_;
    int32_t frameid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LogicFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicFrame) */ {
 public:
  inline LogicFrame() : LogicFrame(nullptr) {}
  ~LogicFrame() override;
  explicit PROTOBUF_CONSTEXPR LogicFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicFrame(const LogicFrame& from);
  LogicFrame(LogicFrame&& from) noexcept
    : LogicFrame() {
    *this = ::std::move(from);
  }

  inline LogicFrame& operator=(const LogicFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicFrame& operator=(LogicFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicFrame* internal_default_instance() {
    return reinterpret_cast<const LogicFrame*>(
               &_LogicFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LogicFrame& a, LogicFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicFrame& from) {
    LogicFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicFrame";
  }
  protected:
  explicit LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnsyncFramesFieldNumber = 2,
    kFrameidFieldNumber = 1,
  };
  // repeated .FrameOpts unsync_frames = 2;
  int unsync_frames_size() const;
  private:
  int _internal_unsync_frames_size() const;
  public:
  void clear_unsync_frames();
  ::FrameOpts* mutable_unsync_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >*
      mutable_unsync_frames();
  private:
  const ::FrameOpts& _internal_unsync_frames(int index) const;
  ::FrameOpts* _internal_add_unsync_frames();
  public:
  const ::FrameOpts& unsync_frames(int index) const;
  ::FrameOpts* add_unsync_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >&
      unsync_frames() const;

  // int32 frameid = 1;
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogicFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts > unsync_frames_;
    int32_t frameid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class NextFrameOpts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NextFrameOpts) */ {
 public:
  inline NextFrameOpts() : NextFrameOpts(nullptr) {}
  ~NextFrameOpts() override;
  explicit PROTOBUF_CONSTEXPR NextFrameOpts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextFrameOpts(const NextFrameOpts& from);
  NextFrameOpts(NextFrameOpts&& from) noexcept
    : NextFrameOpts() {
    *this = ::std::move(from);
  }

  inline NextFrameOpts& operator=(const NextFrameOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextFrameOpts& operator=(NextFrameOpts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextFrameOpts& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextFrameOpts* internal_default_instance() {
    return reinterpret_cast<const NextFrameOpts*>(
               &_NextFrameOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(NextFrameOpts& a, NextFrameOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(NextFrameOpts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextFrameOpts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextFrameOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextFrameOpts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextFrameOpts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NextFrameOpts& from) {
    NextFrameOpts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextFrameOpts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NextFrameOpts";
  }
  protected:
  explicit NextFrameOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptsFieldNumber = 5,
    kFrameidFieldNumber = 1,
    kZidFieldNumber = 2,
    kMatchidFieldNumber = 3,
    kSeatidFieldNumber = 4,
  };
  // repeated .OptionEvent opts = 5;
  int opts_size() const;
  private:
  int _internal_opts_size() const;
  public:
  void clear_opts();
  ::OptionEvent* mutable_opts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
      mutable_opts();
  private:
  const ::OptionEvent& _internal_opts(int index) const;
  ::OptionEvent* _internal_add_opts();
  public:
  const ::OptionEvent& opts(int index) const;
  ::OptionEvent* add_opts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
      opts() const;

  // int32 frameid = 1;
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // int32 zid = 2;
  void clear_zid();
  int32_t zid() const;
  void set_zid(int32_t value);
  private:
  int32_t _internal_zid() const;
  void _internal_set_zid(int32_t value);
  public:

  // int32 matchid = 3;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // int32 seatid = 4;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NextFrameOpts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent > opts_;
    int32_t frameid_;
    int32_t zid_;
    int32_t matchid_;
    int32_t seatid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GuestLoginReq

// string guest_key = 1;
inline void GuestLoginReq::clear_guest_key() {
  _impl_.guest_key_.ClearToEmpty();
}
inline const std::string& GuestLoginReq::guest_key() const {
  // @@protoc_insertion_point(field_get:GuestLoginReq.guest_key)
  return _internal_guest_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuestLoginReq::set_guest_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guest_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GuestLoginReq.guest_key)
}
inline std::string* GuestLoginReq::mutable_guest_key() {
  std::string* _s = _internal_mutable_guest_key();
  // @@protoc_insertion_point(field_mutable:GuestLoginReq.guest_key)
  return _s;
}
inline const std::string& GuestLoginReq::_internal_guest_key() const {
  return _impl_.guest_key_.Get();
}
inline void GuestLoginReq::_internal_set_guest_key(const std::string& value) {
  
  _impl_.guest_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GuestLoginReq::_internal_mutable_guest_key() {
  
  return _impl_.guest_key_.Mutable(GetArenaForAllocation());
}
inline std::string* GuestLoginReq::release_guest_key() {
  // @@protoc_insertion_point(field_release:GuestLoginReq.guest_key)
  return _impl_.guest_key_.Release();
}
inline void GuestLoginReq::set_allocated_guest_key(std::string* guest_key) {
  if (guest_key != nullptr) {
    
  } else {
    
  }
  _impl_.guest_key_.SetAllocated(guest_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guest_key_.IsDefault()) {
    _impl_.guest_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GuestLoginReq.guest_key)
}

// -------------------------------------------------------------------

// UnameLoginReq

// string uname = 1;
inline void UnameLoginReq::clear_uname() {
  _impl_.uname_.ClearToEmpty();
}
inline const std::string& UnameLoginReq::uname() const {
  // @@protoc_insertion_point(field_get:UnameLoginReq.uname)
  return _internal_uname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnameLoginReq::set_uname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UnameLoginReq.uname)
}
inline std::string* UnameLoginReq::mutable_uname() {
  std::string* _s = _internal_mutable_uname();
  // @@protoc_insertion_point(field_mutable:UnameLoginReq.uname)
  return _s;
}
inline const std::string& UnameLoginReq::_internal_uname() const {
  return _impl_.uname_.Get();
}
inline void UnameLoginReq::_internal_set_uname(const std::string& value) {
  
  _impl_.uname_.Set(value, GetArenaForAllocation());
}
inline std::string* UnameLoginReq::_internal_mutable_uname() {
  
  return _impl_.uname_.Mutable(GetArenaForAllocation());
}
inline std::string* UnameLoginReq::release_uname() {
  // @@protoc_insertion_point(field_release:UnameLoginReq.uname)
  return _impl_.uname_.Release();
}
inline void UnameLoginReq::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  _impl_.uname_.SetAllocated(uname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uname_.IsDefault()) {
    _impl_.uname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UnameLoginReq.uname)
}

// string upwd = 2;
inline void UnameLoginReq::clear_upwd() {
  _impl_.upwd_.ClearToEmpty();
}
inline const std::string& UnameLoginReq::upwd() const {
  // @@protoc_insertion_point(field_get:UnameLoginReq.upwd)
  return _internal_upwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnameLoginReq::set_upwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UnameLoginReq.upwd)
}
inline std::string* UnameLoginReq::mutable_upwd() {
  std::string* _s = _internal_mutable_upwd();
  // @@protoc_insertion_point(field_mutable:UnameLoginReq.upwd)
  return _s;
}
inline const std::string& UnameLoginReq::_internal_upwd() const {
  return _impl_.upwd_.Get();
}
inline void UnameLoginReq::_internal_set_upwd(const std::string& value) {
  
  _impl_.upwd_.Set(value, GetArenaForAllocation());
}
inline std::string* UnameLoginReq::_internal_mutable_upwd() {
  
  return _impl_.upwd_.Mutable(GetArenaForAllocation());
}
inline std::string* UnameLoginReq::release_upwd() {
  // @@protoc_insertion_point(field_release:UnameLoginReq.upwd)
  return _impl_.upwd_.Release();
}
inline void UnameLoginReq::set_allocated_upwd(std::string* upwd) {
  if (upwd != nullptr) {
    
  } else {
    
  }
  _impl_.upwd_.SetAllocated(upwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upwd_.IsDefault()) {
    _impl_.upwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UnameLoginReq.upwd)
}

// -------------------------------------------------------------------

// UserCenterInfo

// string unick = 1;
inline void UserCenterInfo::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& UserCenterInfo::unick() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCenterInfo::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserCenterInfo.unick)
}
inline std::string* UserCenterInfo::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:UserCenterInfo.unick)
  return _s;
}
inline const std::string& UserCenterInfo::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void UserCenterInfo::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* UserCenterInfo::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* UserCenterInfo::release_unick() {
  // @@protoc_insertion_point(field_release:UserCenterInfo.unick)
  return _impl_.unick_.Release();
}
inline void UserCenterInfo::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserCenterInfo.unick)
}

// int32 uface = 2;
inline void UserCenterInfo::clear_uface() {
  _impl_.uface_ = 0;
}
inline int32_t UserCenterInfo::_internal_uface() const {
  return _impl_.uface_;
}
inline int32_t UserCenterInfo::uface() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.uface)
  return _internal_uface();
}
inline void UserCenterInfo::_internal_set_uface(int32_t value) {
  
  _impl_.uface_ = value;
}
inline void UserCenterInfo::set_uface(int32_t value) {
  _internal_set_uface(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.uface)
}

// int32 usex = 3;
inline void UserCenterInfo::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t UserCenterInfo::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t UserCenterInfo::usex() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.usex)
  return _internal_usex();
}
inline void UserCenterInfo::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void UserCenterInfo::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.usex)
}

// int32 uvip = 4;
inline void UserCenterInfo::clear_uvip() {
  _impl_.uvip_ = 0;
}
inline int32_t UserCenterInfo::_internal_uvip() const {
  return _impl_.uvip_;
}
inline int32_t UserCenterInfo::uvip() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.uvip)
  return _internal_uvip();
}
inline void UserCenterInfo::_internal_set_uvip(int32_t value) {
  
  _impl_.uvip_ = value;
}
inline void UserCenterInfo::set_uvip(int32_t value) {
  _internal_set_uvip(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.uvip)
}

// int32 uid = 5;
inline void UserCenterInfo::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t UserCenterInfo::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t UserCenterInfo::uid() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.uid)
  return _internal_uid();
}
inline void UserCenterInfo::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void UserCenterInfo::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.uid)
}

// -------------------------------------------------------------------

// GuestLoginRes

// int32 status = 1;
inline void GuestLoginRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GuestLoginRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GuestLoginRes::status() const {
  // @@protoc_insertion_point(field_get:GuestLoginRes.status)
  return _internal_status();
}
inline void GuestLoginRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GuestLoginRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GuestLoginRes.status)
}

// optional .UserCenterInfo uinfo = 2;
inline bool GuestLoginRes::_internal_has_uinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uinfo_ != nullptr);
  return value;
}
inline bool GuestLoginRes::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void GuestLoginRes::clear_uinfo() {
  if (_impl_.uinfo_ != nullptr) _impl_.uinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::UserCenterInfo& GuestLoginRes::_internal_uinfo() const {
  const ::UserCenterInfo* p = _impl_.uinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserCenterInfo&>(
      ::_UserCenterInfo_default_instance_);
}
inline const ::UserCenterInfo& GuestLoginRes::uinfo() const {
  // @@protoc_insertion_point(field_get:GuestLoginRes.uinfo)
  return _internal_uinfo();
}
inline void GuestLoginRes::unsafe_arena_set_allocated_uinfo(
    ::UserCenterInfo* uinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uinfo_);
  }
  _impl_.uinfo_ = uinfo;
  if (uinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GuestLoginRes.uinfo)
}
inline ::UserCenterInfo* GuestLoginRes::release_uinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserCenterInfo* GuestLoginRes::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_release:GuestLoginRes.uinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
  return temp;
}
inline ::UserCenterInfo* GuestLoginRes::_internal_mutable_uinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserCenterInfo>(GetArenaForAllocation());
    _impl_.uinfo_ = p;
  }
  return _impl_.uinfo_;
}
inline ::UserCenterInfo* GuestLoginRes::mutable_uinfo() {
  ::UserCenterInfo* _msg = _internal_mutable_uinfo();
  // @@protoc_insertion_point(field_mutable:GuestLoginRes.uinfo)
  return _msg;
}
inline void GuestLoginRes::set_allocated_uinfo(::UserCenterInfo* uinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uinfo_;
  }
  if (uinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uinfo);
    if (message_arena != submessage_arena) {
      uinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uinfo_ = uinfo;
  // @@protoc_insertion_point(field_set_allocated:GuestLoginRes.uinfo)
}

// -------------------------------------------------------------------

// UnameLoginRes

// int32 status = 1;
inline void UnameLoginRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t UnameLoginRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t UnameLoginRes::status() const {
  // @@protoc_insertion_point(field_get:UnameLoginRes.status)
  return _internal_status();
}
inline void UnameLoginRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void UnameLoginRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnameLoginRes.status)
}

// optional .UserCenterInfo uinfo = 2;
inline bool UnameLoginRes::_internal_has_uinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uinfo_ != nullptr);
  return value;
}
inline bool UnameLoginRes::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void UnameLoginRes::clear_uinfo() {
  if (_impl_.uinfo_ != nullptr) _impl_.uinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::UserCenterInfo& UnameLoginRes::_internal_uinfo() const {
  const ::UserCenterInfo* p = _impl_.uinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserCenterInfo&>(
      ::_UserCenterInfo_default_instance_);
}
inline const ::UserCenterInfo& UnameLoginRes::uinfo() const {
  // @@protoc_insertion_point(field_get:UnameLoginRes.uinfo)
  return _internal_uinfo();
}
inline void UnameLoginRes::unsafe_arena_set_allocated_uinfo(
    ::UserCenterInfo* uinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uinfo_);
  }
  _impl_.uinfo_ = uinfo;
  if (uinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnameLoginRes.uinfo)
}
inline ::UserCenterInfo* UnameLoginRes::release_uinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserCenterInfo* UnameLoginRes::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_release:UnameLoginRes.uinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
  return temp;
}
inline ::UserCenterInfo* UnameLoginRes::_internal_mutable_uinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserCenterInfo>(GetArenaForAllocation());
    _impl_.uinfo_ = p;
  }
  return _impl_.uinfo_;
}
inline ::UserCenterInfo* UnameLoginRes::mutable_uinfo() {
  ::UserCenterInfo* _msg = _internal_mutable_uinfo();
  // @@protoc_insertion_point(field_mutable:UnameLoginRes.uinfo)
  return _msg;
}
inline void UnameLoginRes::set_allocated_uinfo(::UserCenterInfo* uinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uinfo_;
  }
  if (uinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uinfo);
    if (message_arena != submessage_arena) {
      uinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uinfo_ = uinfo;
  // @@protoc_insertion_point(field_set_allocated:UnameLoginRes.uinfo)
}

// -------------------------------------------------------------------

// EditProfileReq

// string unick = 1;
inline void EditProfileReq::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& EditProfileReq::unick() const {
  // @@protoc_insertion_point(field_get:EditProfileReq.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EditProfileReq::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditProfileReq.unick)
}
inline std::string* EditProfileReq::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:EditProfileReq.unick)
  return _s;
}
inline const std::string& EditProfileReq::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void EditProfileReq::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* EditProfileReq::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* EditProfileReq::release_unick() {
  // @@protoc_insertion_point(field_release:EditProfileReq.unick)
  return _impl_.unick_.Release();
}
inline void EditProfileReq::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditProfileReq.unick)
}

// int32 uface = 2;
inline void EditProfileReq::clear_uface() {
  _impl_.uface_ = 0;
}
inline int32_t EditProfileReq::_internal_uface() const {
  return _impl_.uface_;
}
inline int32_t EditProfileReq::uface() const {
  // @@protoc_insertion_point(field_get:EditProfileReq.uface)
  return _internal_uface();
}
inline void EditProfileReq::_internal_set_uface(int32_t value) {
  
  _impl_.uface_ = value;
}
inline void EditProfileReq::set_uface(int32_t value) {
  _internal_set_uface(value);
  // @@protoc_insertion_point(field_set:EditProfileReq.uface)
}

// int32 usex = 3;
inline void EditProfileReq::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t EditProfileReq::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t EditProfileReq::usex() const {
  // @@protoc_insertion_point(field_get:EditProfileReq.usex)
  return _internal_usex();
}
inline void EditProfileReq::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void EditProfileReq::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:EditProfileReq.usex)
}

// -------------------------------------------------------------------

// EditProfileRes

// int32 status = 1;
inline void EditProfileRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t EditProfileRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t EditProfileRes::status() const {
  // @@protoc_insertion_point(field_get:EditProfileRes.status)
  return _internal_status();
}
inline void EditProfileRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void EditProfileRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EditProfileRes.status)
}

// -------------------------------------------------------------------

// AccountUpgradeReq

// string uname = 1;
inline void AccountUpgradeReq::clear_uname() {
  _impl_.uname_.ClearToEmpty();
}
inline const std::string& AccountUpgradeReq::uname() const {
  // @@protoc_insertion_point(field_get:AccountUpgradeReq.uname)
  return _internal_uname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpgradeReq::set_uname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountUpgradeReq.uname)
}
inline std::string* AccountUpgradeReq::mutable_uname() {
  std::string* _s = _internal_mutable_uname();
  // @@protoc_insertion_point(field_mutable:AccountUpgradeReq.uname)
  return _s;
}
inline const std::string& AccountUpgradeReq::_internal_uname() const {
  return _impl_.uname_.Get();
}
inline void AccountUpgradeReq::_internal_set_uname(const std::string& value) {
  
  _impl_.uname_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountUpgradeReq::_internal_mutable_uname() {
  
  return _impl_.uname_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountUpgradeReq::release_uname() {
  // @@protoc_insertion_point(field_release:AccountUpgradeReq.uname)
  return _impl_.uname_.Release();
}
inline void AccountUpgradeReq::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  _impl_.uname_.SetAllocated(uname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uname_.IsDefault()) {
    _impl_.uname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountUpgradeReq.uname)
}

// string upwd_md5 = 2;
inline void AccountUpgradeReq::clear_upwd_md5() {
  _impl_.upwd_md5_.ClearToEmpty();
}
inline const std::string& AccountUpgradeReq::upwd_md5() const {
  // @@protoc_insertion_point(field_get:AccountUpgradeReq.upwd_md5)
  return _internal_upwd_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpgradeReq::set_upwd_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upwd_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountUpgradeReq.upwd_md5)
}
inline std::string* AccountUpgradeReq::mutable_upwd_md5() {
  std::string* _s = _internal_mutable_upwd_md5();
  // @@protoc_insertion_point(field_mutable:AccountUpgradeReq.upwd_md5)
  return _s;
}
inline const std::string& AccountUpgradeReq::_internal_upwd_md5() const {
  return _impl_.upwd_md5_.Get();
}
inline void AccountUpgradeReq::_internal_set_upwd_md5(const std::string& value) {
  
  _impl_.upwd_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountUpgradeReq::_internal_mutable_upwd_md5() {
  
  return _impl_.upwd_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountUpgradeReq::release_upwd_md5() {
  // @@protoc_insertion_point(field_release:AccountUpgradeReq.upwd_md5)
  return _impl_.upwd_md5_.Release();
}
inline void AccountUpgradeReq::set_allocated_upwd_md5(std::string* upwd_md5) {
  if (upwd_md5 != nullptr) {
    
  } else {
    
  }
  _impl_.upwd_md5_.SetAllocated(upwd_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upwd_md5_.IsDefault()) {
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountUpgradeReq.upwd_md5)
}

// -------------------------------------------------------------------

// AccountUpgradeRes

// int32 status = 1;
inline void AccountUpgradeRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t AccountUpgradeRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t AccountUpgradeRes::status() const {
  // @@protoc_insertion_point(field_get:AccountUpgradeRes.status)
  return _internal_status();
}
inline void AccountUpgradeRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void AccountUpgradeRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AccountUpgradeRes.status)
}

// -------------------------------------------------------------------

// LoginOutRes

// int32 status = 1;
inline void LoginOutRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t LoginOutRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t LoginOutRes::status() const {
  // @@protoc_insertion_point(field_get:LoginOutRes.status)
  return _internal_status();
}
inline void LoginOutRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void LoginOutRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LoginOutRes.status)
}

// -------------------------------------------------------------------

// UserGameInfo

// int32 uchip = 1;
inline void UserGameInfo::clear_uchip() {
  _impl_.uchip_ = 0;
}
inline int32_t UserGameInfo::_internal_uchip() const {
  return _impl_.uchip_;
}
inline int32_t UserGameInfo::uchip() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.uchip)
  return _internal_uchip();
}
inline void UserGameInfo::_internal_set_uchip(int32_t value) {
  
  _impl_.uchip_ = value;
}
inline void UserGameInfo::set_uchip(int32_t value) {
  _internal_set_uchip(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.uchip)
}

// int32 uexp = 2;
inline void UserGameInfo::clear_uexp() {
  _impl_.uexp_ = 0;
}
inline int32_t UserGameInfo::_internal_uexp() const {
  return _impl_.uexp_;
}
inline int32_t UserGameInfo::uexp() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.uexp)
  return _internal_uexp();
}
inline void UserGameInfo::_internal_set_uexp(int32_t value) {
  
  _impl_.uexp_ = value;
}
inline void UserGameInfo::set_uexp(int32_t value) {
  _internal_set_uexp(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.uexp)
}

// int32 uvip = 3;
inline void UserGameInfo::clear_uvip() {
  _impl_.uvip_ = 0;
}
inline int32_t UserGameInfo::_internal_uvip() const {
  return _impl_.uvip_;
}
inline int32_t UserGameInfo::uvip() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.uvip)
  return _internal_uvip();
}
inline void UserGameInfo::_internal_set_uvip(int32_t value) {
  
  _impl_.uvip_ = value;
}
inline void UserGameInfo::set_uvip(int32_t value) {
  _internal_set_uvip(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.uvip)
}

// int32 uchip2 = 4;
inline void UserGameInfo::clear_uchip2() {
  _impl_.uchip2_ = 0;
}
inline int32_t UserGameInfo::_internal_uchip2() const {
  return _impl_.uchip2_;
}
inline int32_t UserGameInfo::uchip2() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.uchip2)
  return _internal_uchip2();
}
inline void UserGameInfo::_internal_set_uchip2(int32_t value) {
  
  _impl_.uchip2_ = value;
}
inline void UserGameInfo::set_uchip2(int32_t value) {
  _internal_set_uchip2(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.uchip2)
}

// int32 uchip3 = 5;
inline void UserGameInfo::clear_uchip3() {
  _impl_.uchip3_ = 0;
}
inline int32_t UserGameInfo::_internal_uchip3() const {
  return _impl_.uchip3_;
}
inline int32_t UserGameInfo::uchip3() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.uchip3)
  return _internal_uchip3();
}
inline void UserGameInfo::_internal_set_uchip3(int32_t value) {
  
  _impl_.uchip3_ = value;
}
inline void UserGameInfo::set_uchip3(int32_t value) {
  _internal_set_uchip3(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.uchip3)
}

// int32 udata1 = 6;
inline void UserGameInfo::clear_udata1() {
  _impl_.udata1_ = 0;
}
inline int32_t UserGameInfo::_internal_udata1() const {
  return _impl_.udata1_;
}
inline int32_t UserGameInfo::udata1() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.udata1)
  return _internal_udata1();
}
inline void UserGameInfo::_internal_set_udata1(int32_t value) {
  
  _impl_.udata1_ = value;
}
inline void UserGameInfo::set_udata1(int32_t value) {
  _internal_set_udata1(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.udata1)
}

// int32 udata2 = 7;
inline void UserGameInfo::clear_udata2() {
  _impl_.udata2_ = 0;
}
inline int32_t UserGameInfo::_internal_udata2() const {
  return _impl_.udata2_;
}
inline int32_t UserGameInfo::udata2() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.udata2)
  return _internal_udata2();
}
inline void UserGameInfo::_internal_set_udata2(int32_t value) {
  
  _impl_.udata2_ = value;
}
inline void UserGameInfo::set_udata2(int32_t value) {
  _internal_set_udata2(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.udata2)
}

// int32 udata3 = 8;
inline void UserGameInfo::clear_udata3() {
  _impl_.udata3_ = 0;
}
inline int32_t UserGameInfo::_internal_udata3() const {
  return _impl_.udata3_;
}
inline int32_t UserGameInfo::udata3() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.udata3)
  return _internal_udata3();
}
inline void UserGameInfo::_internal_set_udata3(int32_t value) {
  
  _impl_.udata3_ = value;
}
inline void UserGameInfo::set_udata3(int32_t value) {
  _internal_set_udata3(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.udata3)
}

// int32 bonues_status = 9;
inline void UserGameInfo::clear_bonues_status() {
  _impl_.bonues_status_ = 0;
}
inline int32_t UserGameInfo::_internal_bonues_status() const {
  return _impl_.bonues_status_;
}
inline int32_t UserGameInfo::bonues_status() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.bonues_status)
  return _internal_bonues_status();
}
inline void UserGameInfo::_internal_set_bonues_status(int32_t value) {
  
  _impl_.bonues_status_ = value;
}
inline void UserGameInfo::set_bonues_status(int32_t value) {
  _internal_set_bonues_status(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.bonues_status)
}

// int32 bonues = 10;
inline void UserGameInfo::clear_bonues() {
  _impl_.bonues_ = 0;
}
inline int32_t UserGameInfo::_internal_bonues() const {
  return _impl_.bonues_;
}
inline int32_t UserGameInfo::bonues() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.bonues)
  return _internal_bonues();
}
inline void UserGameInfo::_internal_set_bonues(int32_t value) {
  
  _impl_.bonues_ = value;
}
inline void UserGameInfo::set_bonues(int32_t value) {
  _internal_set_bonues(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.bonues)
}

// int32 days = 11;
inline void UserGameInfo::clear_days() {
  _impl_.days_ = 0;
}
inline int32_t UserGameInfo::_internal_days() const {
  return _impl_.days_;
}
inline int32_t UserGameInfo::days() const {
  // @@protoc_insertion_point(field_get:UserGameInfo.days)
  return _internal_days();
}
inline void UserGameInfo::_internal_set_days(int32_t value) {
  
  _impl_.days_ = value;
}
inline void UserGameInfo::set_days(int32_t value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:UserGameInfo.days)
}

// -------------------------------------------------------------------

// GetUgameInfoRes

// int32 status = 1;
inline void GetUgameInfoRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetUgameInfoRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetUgameInfoRes::status() const {
  // @@protoc_insertion_point(field_get:GetUgameInfoRes.status)
  return _internal_status();
}
inline void GetUgameInfoRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetUgameInfoRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetUgameInfoRes.status)
}

// optional .UserGameInfo uinfo = 2;
inline bool GetUgameInfoRes::_internal_has_uinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uinfo_ != nullptr);
  return value;
}
inline bool GetUgameInfoRes::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void GetUgameInfoRes::clear_uinfo() {
  if (_impl_.uinfo_ != nullptr) _impl_.uinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::UserGameInfo& GetUgameInfoRes::_internal_uinfo() const {
  const ::UserGameInfo* p = _impl_.uinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserGameInfo&>(
      ::_UserGameInfo_default_instance_);
}
inline const ::UserGameInfo& GetUgameInfoRes::uinfo() const {
  // @@protoc_insertion_point(field_get:GetUgameInfoRes.uinfo)
  return _internal_uinfo();
}
inline void GetUgameInfoRes::unsafe_arena_set_allocated_uinfo(
    ::UserGameInfo* uinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uinfo_);
  }
  _impl_.uinfo_ = uinfo;
  if (uinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetUgameInfoRes.uinfo)
}
inline ::UserGameInfo* GetUgameInfoRes::release_uinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserGameInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserGameInfo* GetUgameInfoRes::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_release:GetUgameInfoRes.uinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserGameInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
  return temp;
}
inline ::UserGameInfo* GetUgameInfoRes::_internal_mutable_uinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserGameInfo>(GetArenaForAllocation());
    _impl_.uinfo_ = p;
  }
  return _impl_.uinfo_;
}
inline ::UserGameInfo* GetUgameInfoRes::mutable_uinfo() {
  ::UserGameInfo* _msg = _internal_mutable_uinfo();
  // @@protoc_insertion_point(field_mutable:GetUgameInfoRes.uinfo)
  return _msg;
}
inline void GetUgameInfoRes::set_allocated_uinfo(::UserGameInfo* uinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uinfo_;
  }
  if (uinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uinfo);
    if (message_arena != submessage_arena) {
      uinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uinfo_ = uinfo;
  // @@protoc_insertion_point(field_set_allocated:GetUgameInfoRes.uinfo)
}

// -------------------------------------------------------------------

// RecvLoginBonuesRes

// int32 status = 1;
inline void RecvLoginBonuesRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t RecvLoginBonuesRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t RecvLoginBonuesRes::status() const {
  // @@protoc_insertion_point(field_get:RecvLoginBonuesRes.status)
  return _internal_status();
}
inline void RecvLoginBonuesRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void RecvLoginBonuesRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RecvLoginBonuesRes.status)
}

// -------------------------------------------------------------------

// WorldChipRankInfo

// string unick = 1;
inline void WorldChipRankInfo::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& WorldChipRankInfo::unick() const {
  // @@protoc_insertion_point(field_get:WorldChipRankInfo.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorldChipRankInfo::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldChipRankInfo.unick)
}
inline std::string* WorldChipRankInfo::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:WorldChipRankInfo.unick)
  return _s;
}
inline const std::string& WorldChipRankInfo::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void WorldChipRankInfo::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* WorldChipRankInfo::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* WorldChipRankInfo::release_unick() {
  // @@protoc_insertion_point(field_release:WorldChipRankInfo.unick)
  return _impl_.unick_.Release();
}
inline void WorldChipRankInfo::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldChipRankInfo.unick)
}

// int32 uface = 2;
inline void WorldChipRankInfo::clear_uface() {
  _impl_.uface_ = 0;
}
inline int32_t WorldChipRankInfo::_internal_uface() const {
  return _impl_.uface_;
}
inline int32_t WorldChipRankInfo::uface() const {
  // @@protoc_insertion_point(field_get:WorldChipRankInfo.uface)
  return _internal_uface();
}
inline void WorldChipRankInfo::_internal_set_uface(int32_t value) {
  
  _impl_.uface_ = value;
}
inline void WorldChipRankInfo::set_uface(int32_t value) {
  _internal_set_uface(value);
  // @@protoc_insertion_point(field_set:WorldChipRankInfo.uface)
}

// int32 usex = 3;
inline void WorldChipRankInfo::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t WorldChipRankInfo::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t WorldChipRankInfo::usex() const {
  // @@protoc_insertion_point(field_get:WorldChipRankInfo.usex)
  return _internal_usex();
}
inline void WorldChipRankInfo::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void WorldChipRankInfo::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:WorldChipRankInfo.usex)
}

// int32 uvip = 4;
inline void WorldChipRankInfo::clear_uvip() {
  _impl_.uvip_ = 0;
}
inline int32_t WorldChipRankInfo::_internal_uvip() const {
  return _impl_.uvip_;
}
inline int32_t WorldChipRankInfo::uvip() const {
  // @@protoc_insertion_point(field_get:WorldChipRankInfo.uvip)
  return _internal_uvip();
}
inline void WorldChipRankInfo::_internal_set_uvip(int32_t value) {
  
  _impl_.uvip_ = value;
}
inline void WorldChipRankInfo::set_uvip(int32_t value) {
  _internal_set_uvip(value);
  // @@protoc_insertion_point(field_set:WorldChipRankInfo.uvip)
}

// int32 uchip = 5;
inline void WorldChipRankInfo::clear_uchip() {
  _impl_.uchip_ = 0;
}
inline int32_t WorldChipRankInfo::_internal_uchip() const {
  return _impl_.uchip_;
}
inline int32_t WorldChipRankInfo::uchip() const {
  // @@protoc_insertion_point(field_get:WorldChipRankInfo.uchip)
  return _internal_uchip();
}
inline void WorldChipRankInfo::_internal_set_uchip(int32_t value) {
  
  _impl_.uchip_ = value;
}
inline void WorldChipRankInfo::set_uchip(int32_t value) {
  _internal_set_uchip(value);
  // @@protoc_insertion_point(field_set:WorldChipRankInfo.uchip)
}

// -------------------------------------------------------------------

// GetWorldRankUchipRes

// int32 status = 1;
inline void GetWorldRankUchipRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetWorldRankUchipRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetWorldRankUchipRes::status() const {
  // @@protoc_insertion_point(field_get:GetWorldRankUchipRes.status)
  return _internal_status();
}
inline void GetWorldRankUchipRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetWorldRankUchipRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetWorldRankUchipRes.status)
}

// repeated .WorldChipRankInfo rank_info = 2;
inline int GetWorldRankUchipRes::_internal_rank_info_size() const {
  return _impl_.rank_info_.size();
}
inline int GetWorldRankUchipRes::rank_info_size() const {
  return _internal_rank_info_size();
}
inline void GetWorldRankUchipRes::clear_rank_info() {
  _impl_.rank_info_.Clear();
}
inline ::WorldChipRankInfo* GetWorldRankUchipRes::mutable_rank_info(int index) {
  // @@protoc_insertion_point(field_mutable:GetWorldRankUchipRes.rank_info)
  return _impl_.rank_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldChipRankInfo >*
GetWorldRankUchipRes::mutable_rank_info() {
  // @@protoc_insertion_point(field_mutable_list:GetWorldRankUchipRes.rank_info)
  return &_impl_.rank_info_;
}
inline const ::WorldChipRankInfo& GetWorldRankUchipRes::_internal_rank_info(int index) const {
  return _impl_.rank_info_.Get(index);
}
inline const ::WorldChipRankInfo& GetWorldRankUchipRes::rank_info(int index) const {
  // @@protoc_insertion_point(field_get:GetWorldRankUchipRes.rank_info)
  return _internal_rank_info(index);
}
inline ::WorldChipRankInfo* GetWorldRankUchipRes::_internal_add_rank_info() {
  return _impl_.rank_info_.Add();
}
inline ::WorldChipRankInfo* GetWorldRankUchipRes::add_rank_info() {
  ::WorldChipRankInfo* _add = _internal_add_rank_info();
  // @@protoc_insertion_point(field_add:GetWorldRankUchipRes.rank_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldChipRankInfo >&
GetWorldRankUchipRes::rank_info() const {
  // @@protoc_insertion_point(field_list:GetWorldRankUchipRes.rank_info)
  return _impl_.rank_info_;
}

// -------------------------------------------------------------------

// GetSysMsgReq

// int32 ver_num = 1;
inline void GetSysMsgReq::clear_ver_num() {
  _impl_.ver_num_ = 0;
}
inline int32_t GetSysMsgReq::_internal_ver_num() const {
  return _impl_.ver_num_;
}
inline int32_t GetSysMsgReq::ver_num() const {
  // @@protoc_insertion_point(field_get:GetSysMsgReq.ver_num)
  return _internal_ver_num();
}
inline void GetSysMsgReq::_internal_set_ver_num(int32_t value) {
  
  _impl_.ver_num_ = value;
}
inline void GetSysMsgReq::set_ver_num(int32_t value) {
  _internal_set_ver_num(value);
  // @@protoc_insertion_point(field_set:GetSysMsgReq.ver_num)
}

// -------------------------------------------------------------------

// GetSysMsgRes

// int32 status = 1;
inline void GetSysMsgRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetSysMsgRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetSysMsgRes::status() const {
  // @@protoc_insertion_point(field_get:GetSysMsgRes.status)
  return _internal_status();
}
inline void GetSysMsgRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetSysMsgRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetSysMsgRes.status)
}

// int32 ver_num = 2;
inline void GetSysMsgRes::clear_ver_num() {
  _impl_.ver_num_ = 0;
}
inline int32_t GetSysMsgRes::_internal_ver_num() const {
  return _impl_.ver_num_;
}
inline int32_t GetSysMsgRes::ver_num() const {
  // @@protoc_insertion_point(field_get:GetSysMsgRes.ver_num)
  return _internal_ver_num();
}
inline void GetSysMsgRes::_internal_set_ver_num(int32_t value) {
  
  _impl_.ver_num_ = value;
}
inline void GetSysMsgRes::set_ver_num(int32_t value) {
  _internal_set_ver_num(value);
  // @@protoc_insertion_point(field_set:GetSysMsgRes.ver_num)
}

// repeated string sys_msgs = 3;
inline int GetSysMsgRes::_internal_sys_msgs_size() const {
  return _impl_.sys_msgs_.size();
}
inline int GetSysMsgRes::sys_msgs_size() const {
  return _internal_sys_msgs_size();
}
inline void GetSysMsgRes::clear_sys_msgs() {
  _impl_.sys_msgs_.Clear();
}
inline std::string* GetSysMsgRes::add_sys_msgs() {
  std::string* _s = _internal_add_sys_msgs();
  // @@protoc_insertion_point(field_add_mutable:GetSysMsgRes.sys_msgs)
  return _s;
}
inline const std::string& GetSysMsgRes::_internal_sys_msgs(int index) const {
  return _impl_.sys_msgs_.Get(index);
}
inline const std::string& GetSysMsgRes::sys_msgs(int index) const {
  // @@protoc_insertion_point(field_get:GetSysMsgRes.sys_msgs)
  return _internal_sys_msgs(index);
}
inline std::string* GetSysMsgRes::mutable_sys_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:GetSysMsgRes.sys_msgs)
  return _impl_.sys_msgs_.Mutable(index);
}
inline void GetSysMsgRes::set_sys_msgs(int index, const std::string& value) {
  _impl_.sys_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::set_sys_msgs(int index, std::string&& value) {
  _impl_.sys_msgs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::set_sys_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sys_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::set_sys_msgs(int index, const char* value, size_t size) {
  _impl_.sys_msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSysMsgRes.sys_msgs)
}
inline std::string* GetSysMsgRes::_internal_add_sys_msgs() {
  return _impl_.sys_msgs_.Add();
}
inline void GetSysMsgRes::add_sys_msgs(const std::string& value) {
  _impl_.sys_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::add_sys_msgs(std::string&& value) {
  _impl_.sys_msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::add_sys_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sys_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::add_sys_msgs(const char* value, size_t size) {
  _impl_.sys_msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSysMsgRes.sys_msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSysMsgRes::sys_msgs() const {
  // @@protoc_insertion_point(field_list:GetSysMsgRes.sys_msgs)
  return _impl_.sys_msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSysMsgRes::mutable_sys_msgs() {
  // @@protoc_insertion_point(field_mutable_list:GetSysMsgRes.sys_msgs)
  return &_impl_.sys_msgs_;
}

// -------------------------------------------------------------------

// LoginLogicRes

// int32 status = 1;
inline void LoginLogicRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t LoginLogicRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t LoginLogicRes::status() const {
  // @@protoc_insertion_point(field_get:LoginLogicRes.status)
  return _internal_status();
}
inline void LoginLogicRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void LoginLogicRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LoginLogicRes.status)
}

// -------------------------------------------------------------------

// EnterZoneReq

// int32 zid = 1;
inline void EnterZoneReq::clear_zid() {
  _impl_.zid_ = 0;
}
inline int32_t EnterZoneReq::_internal_zid() const {
  return _impl_.zid_;
}
inline int32_t EnterZoneReq::zid() const {
  // @@protoc_insertion_point(field_get:EnterZoneReq.zid)
  return _internal_zid();
}
inline void EnterZoneReq::_internal_set_zid(int32_t value) {
  
  _impl_.zid_ = value;
}
inline void EnterZoneReq::set_zid(int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:EnterZoneReq.zid)
}

// -------------------------------------------------------------------

// EnterZoneRes

// int32 status = 1;
inline void EnterZoneRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t EnterZoneRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t EnterZoneRes::status() const {
  // @@protoc_insertion_point(field_get:EnterZoneRes.status)
  return _internal_status();
}
inline void EnterZoneRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void EnterZoneRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EnterZoneRes.status)
}

// -------------------------------------------------------------------

// EnterMatch

// int32 zid = 1;
inline void EnterMatch::clear_zid() {
  _impl_.zid_ = 0;
}
inline int32_t EnterMatch::_internal_zid() const {
  return _impl_.zid_;
}
inline int32_t EnterMatch::zid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.zid)
  return _internal_zid();
}
inline void EnterMatch::_internal_set_zid(int32_t value) {
  
  _impl_.zid_ = value;
}
inline void EnterMatch::set_zid(int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.zid)
}

// int32 matchid = 2;
inline void EnterMatch::clear_matchid() {
  _impl_.matchid_ = 0;
}
inline int32_t EnterMatch::_internal_matchid() const {
  return _impl_.matchid_;
}
inline int32_t EnterMatch::matchid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.matchid)
  return _internal_matchid();
}
inline void EnterMatch::_internal_set_matchid(int32_t value) {
  
  _impl_.matchid_ = value;
}
inline void EnterMatch::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.matchid)
}

// int32 seatid = 3;
inline void EnterMatch::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t EnterMatch::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t EnterMatch::seatid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.seatid)
  return _internal_seatid();
}
inline void EnterMatch::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void EnterMatch::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.seatid)
}

// int32 side = 4;
inline void EnterMatch::clear_side() {
  _impl_.side_ = 0;
}
inline int32_t EnterMatch::_internal_side() const {
  return _impl_.side_;
}
inline int32_t EnterMatch::side() const {
  // @@protoc_insertion_point(field_get:EnterMatch.side)
  return _internal_side();
}
inline void EnterMatch::_internal_set_side(int32_t value) {
  
  _impl_.side_ = value;
}
inline void EnterMatch::set_side(int32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:EnterMatch.side)
}

// -------------------------------------------------------------------

// UserArrived

// string unick = 1;
inline void UserArrived::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& UserArrived::unick() const {
  // @@protoc_insertion_point(field_get:UserArrived.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserArrived::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserArrived.unick)
}
inline std::string* UserArrived::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:UserArrived.unick)
  return _s;
}
inline const std::string& UserArrived::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void UserArrived::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* UserArrived::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* UserArrived::release_unick() {
  // @@protoc_insertion_point(field_release:UserArrived.unick)
  return _impl_.unick_.Release();
}
inline void UserArrived::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserArrived.unick)
}

// int32 uface = 2;
inline void UserArrived::clear_uface() {
  _impl_.uface_ = 0;
}
inline int32_t UserArrived::_internal_uface() const {
  return _impl_.uface_;
}
inline int32_t UserArrived::uface() const {
  // @@protoc_insertion_point(field_get:UserArrived.uface)
  return _internal_uface();
}
inline void UserArrived::_internal_set_uface(int32_t value) {
  
  _impl_.uface_ = value;
}
inline void UserArrived::set_uface(int32_t value) {
  _internal_set_uface(value);
  // @@protoc_insertion_point(field_set:UserArrived.uface)
}

// int32 usex = 3;
inline void UserArrived::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t UserArrived::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t UserArrived::usex() const {
  // @@protoc_insertion_point(field_get:UserArrived.usex)
  return _internal_usex();
}
inline void UserArrived::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void UserArrived::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:UserArrived.usex)
}

// int32 seatid = 4;
inline void UserArrived::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t UserArrived::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t UserArrived::seatid() const {
  // @@protoc_insertion_point(field_get:UserArrived.seatid)
  return _internal_seatid();
}
inline void UserArrived::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void UserArrived::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:UserArrived.seatid)
}

// int32 side = 5;
inline void UserArrived::clear_side() {
  _impl_.side_ = 0;
}
inline int32_t UserArrived::_internal_side() const {
  return _impl_.side_;
}
inline int32_t UserArrived::side() const {
  // @@protoc_insertion_point(field_get:UserArrived.side)
  return _internal_side();
}
inline void UserArrived::_internal_set_side(int32_t value) {
  
  _impl_.side_ = value;
}
inline void UserArrived::set_side(int32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:UserArrived.side)
}

// -------------------------------------------------------------------

// ExitMatchRes

// int32 status = 1;
inline void ExitMatchRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t ExitMatchRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t ExitMatchRes::status() const {
  // @@protoc_insertion_point(field_get:ExitMatchRes.status)
  return _internal_status();
}
inline void ExitMatchRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void ExitMatchRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ExitMatchRes.status)
}

// -------------------------------------------------------------------

// UserExitMatch

// int32 seatid = 1;
inline void UserExitMatch::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t UserExitMatch::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t UserExitMatch::seatid() const {
  // @@protoc_insertion_point(field_get:UserExitMatch.seatid)
  return _internal_seatid();
}
inline void UserExitMatch::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void UserExitMatch::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:UserExitMatch.seatid)
}

// -------------------------------------------------------------------

// PlayerMatchInfo

// int32 heroid = 1;
inline void PlayerMatchInfo::clear_heroid() {
  _impl_.heroid_ = 0;
}
inline int32_t PlayerMatchInfo::_internal_heroid() const {
  return _impl_.heroid_;
}
inline int32_t PlayerMatchInfo::heroid() const {
  // @@protoc_insertion_point(field_get:PlayerMatchInfo.heroid)
  return _internal_heroid();
}
inline void PlayerMatchInfo::_internal_set_heroid(int32_t value) {
  
  _impl_.heroid_ = value;
}
inline void PlayerMatchInfo::set_heroid(int32_t value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:PlayerMatchInfo.heroid)
}

// int32 seatid = 2;
inline void PlayerMatchInfo::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t PlayerMatchInfo::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t PlayerMatchInfo::seatid() const {
  // @@protoc_insertion_point(field_get:PlayerMatchInfo.seatid)
  return _internal_seatid();
}
inline void PlayerMatchInfo::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void PlayerMatchInfo::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:PlayerMatchInfo.seatid)
}

// int32 side = 3;
inline void PlayerMatchInfo::clear_side() {
  _impl_.side_ = 0;
}
inline int32_t PlayerMatchInfo::_internal_side() const {
  return _impl_.side_;
}
inline int32_t PlayerMatchInfo::side() const {
  // @@protoc_insertion_point(field_get:PlayerMatchInfo.side)
  return _internal_side();
}
inline void PlayerMatchInfo::_internal_set_side(int32_t value) {
  
  _impl_.side_ = value;
}
inline void PlayerMatchInfo::set_side(int32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:PlayerMatchInfo.side)
}

// -------------------------------------------------------------------

// GameStart

// repeated .PlayerMatchInfo players_match_info = 1;
inline int GameStart::_internal_players_match_info_size() const {
  return _impl_.players_match_info_.size();
}
inline int GameStart::players_match_info_size() const {
  return _internal_players_match_info_size();
}
inline void GameStart::clear_players_match_info() {
  _impl_.players_match_info_.Clear();
}
inline ::PlayerMatchInfo* GameStart::mutable_players_match_info(int index) {
  // @@protoc_insertion_point(field_mutable:GameStart.players_match_info)
  return _impl_.players_match_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMatchInfo >*
GameStart::mutable_players_match_info() {
  // @@protoc_insertion_point(field_mutable_list:GameStart.players_match_info)
  return &_impl_.players_match_info_;
}
inline const ::PlayerMatchInfo& GameStart::_internal_players_match_info(int index) const {
  return _impl_.players_match_info_.Get(index);
}
inline const ::PlayerMatchInfo& GameStart::players_match_info(int index) const {
  // @@protoc_insertion_point(field_get:GameStart.players_match_info)
  return _internal_players_match_info(index);
}
inline ::PlayerMatchInfo* GameStart::_internal_add_players_match_info() {
  return _impl_.players_match_info_.Add();
}
inline ::PlayerMatchInfo* GameStart::add_players_match_info() {
  ::PlayerMatchInfo* _add = _internal_add_players_match_info();
  // @@protoc_insertion_point(field_add:GameStart.players_match_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerMatchInfo >&
GameStart::players_match_info() const {
  // @@protoc_insertion_point(field_list:GameStart.players_match_info)
  return _impl_.players_match_info_;
}

// -------------------------------------------------------------------

// UdpTest

// string content = 1;
inline void UdpTest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& UdpTest::content() const {
  // @@protoc_insertion_point(field_get:UdpTest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UdpTest::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UdpTest.content)
}
inline std::string* UdpTest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:UdpTest.content)
  return _s;
}
inline const std::string& UdpTest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void UdpTest::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* UdpTest::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* UdpTest::release_content() {
  // @@protoc_insertion_point(field_release:UdpTest.content)
  return _impl_.content_.Release();
}
inline void UdpTest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UdpTest.content)
}

// -------------------------------------------------------------------

// LoginLogicReq

// string udp_ip = 1;
inline void LoginLogicReq::clear_udp_ip() {
  _impl_.udp_ip_.ClearToEmpty();
}
inline const std::string& LoginLogicReq::udp_ip() const {
  // @@protoc_insertion_point(field_get:LoginLogicReq.udp_ip)
  return _internal_udp_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginLogicReq::set_udp_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.udp_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginLogicReq.udp_ip)
}
inline std::string* LoginLogicReq::mutable_udp_ip() {
  std::string* _s = _internal_mutable_udp_ip();
  // @@protoc_insertion_point(field_mutable:LoginLogicReq.udp_ip)
  return _s;
}
inline const std::string& LoginLogicReq::_internal_udp_ip() const {
  return _impl_.udp_ip_.Get();
}
inline void LoginLogicReq::_internal_set_udp_ip(const std::string& value) {
  
  _impl_.udp_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginLogicReq::_internal_mutable_udp_ip() {
  
  return _impl_.udp_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginLogicReq::release_udp_ip() {
  // @@protoc_insertion_point(field_release:LoginLogicReq.udp_ip)
  return _impl_.udp_ip_.Release();
}
inline void LoginLogicReq::set_allocated_udp_ip(std::string* udp_ip) {
  if (udp_ip != nullptr) {
    
  } else {
    
  }
  _impl_.udp_ip_.SetAllocated(udp_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.udp_ip_.IsDefault()) {
    _impl_.udp_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginLogicReq.udp_ip)
}

// int32 udp_port = 2;
inline void LoginLogicReq::clear_udp_port() {
  _impl_.udp_port_ = 0;
}
inline int32_t LoginLogicReq::_internal_udp_port() const {
  return _impl_.udp_port_;
}
inline int32_t LoginLogicReq::udp_port() const {
  // @@protoc_insertion_point(field_get:LoginLogicReq.udp_port)
  return _internal_udp_port();
}
inline void LoginLogicReq::_internal_set_udp_port(int32_t value) {
  
  _impl_.udp_port_ = value;
}
inline void LoginLogicReq::set_udp_port(int32_t value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:LoginLogicReq.udp_port)
}

// -------------------------------------------------------------------

// OptionEvent

// int32 seatid = 1;
inline void OptionEvent::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t OptionEvent::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t OptionEvent::seatid() const {
  // @@protoc_insertion_point(field_get:OptionEvent.seatid)
  return _internal_seatid();
}
inline void OptionEvent::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void OptionEvent::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:OptionEvent.seatid)
}

// int32 opt_type = 2;
inline void OptionEvent::clear_opt_type() {
  _impl_.opt_type_ = 0;
}
inline int32_t OptionEvent::_internal_opt_type() const {
  return _impl_.opt_type_;
}
inline int32_t OptionEvent::opt_type() const {
  // @@protoc_insertion_point(field_get:OptionEvent.opt_type)
  return _internal_opt_type();
}
inline void OptionEvent::_internal_set_opt_type(int32_t value) {
  
  _impl_.opt_type_ = value;
}
inline void OptionEvent::set_opt_type(int32_t value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:OptionEvent.opt_type)
}

// optional int32 x = 3;
inline bool OptionEvent::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionEvent::has_x() const {
  return _internal_has_x();
}
inline void OptionEvent::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t OptionEvent::_internal_x() const {
  return _impl_.x_;
}
inline int32_t OptionEvent::x() const {
  // @@protoc_insertion_point(field_get:OptionEvent.x)
  return _internal_x();
}
inline void OptionEvent::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void OptionEvent::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:OptionEvent.x)
}

// optional int32 y = 4;
inline bool OptionEvent::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OptionEvent::has_y() const {
  return _internal_has_y();
}
inline void OptionEvent::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t OptionEvent::_internal_y() const {
  return _impl_.y_;
}
inline int32_t OptionEvent::y() const {
  // @@protoc_insertion_point(field_get:OptionEvent.y)
  return _internal_y();
}
inline void OptionEvent::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void OptionEvent::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:OptionEvent.y)
}

// -------------------------------------------------------------------

// FrameOpts

// int32 frameid = 1;
inline void FrameOpts::clear_frameid() {
  _impl_.frameid_ = 0;
}
inline int32_t FrameOpts::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int32_t FrameOpts::frameid() const {
  // @@protoc_insertion_point(field_get:FrameOpts.frameid)
  return _internal_frameid();
}
inline void FrameOpts::_internal_set_frameid(int32_t value) {
  
  _impl_.frameid_ = value;
}
inline void FrameOpts::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:FrameOpts.frameid)
}

// repeated .OptionEvent opts = 2;
inline int FrameOpts::_internal_opts_size() const {
  return _impl_.opts_.size();
}
inline int FrameOpts::opts_size() const {
  return _internal_opts_size();
}
inline void FrameOpts::clear_opts() {
  _impl_.opts_.Clear();
}
inline ::OptionEvent* FrameOpts::mutable_opts(int index) {
  // @@protoc_insertion_point(field_mutable:FrameOpts.opts)
  return _impl_.opts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
FrameOpts::mutable_opts() {
  // @@protoc_insertion_point(field_mutable_list:FrameOpts.opts)
  return &_impl_.opts_;
}
inline const ::OptionEvent& FrameOpts::_internal_opts(int index) const {
  return _impl_.opts_.Get(index);
}
inline const ::OptionEvent& FrameOpts::opts(int index) const {
  // @@protoc_insertion_point(field_get:FrameOpts.opts)
  return _internal_opts(index);
}
inline ::OptionEvent* FrameOpts::_internal_add_opts() {
  return _impl_.opts_.Add();
}
inline ::OptionEvent* FrameOpts::add_opts() {
  ::OptionEvent* _add = _internal_add_opts();
  // @@protoc_insertion_point(field_add:FrameOpts.opts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
FrameOpts::opts() const {
  // @@protoc_insertion_point(field_list:FrameOpts.opts)
  return _impl_.opts_;
}

// -------------------------------------------------------------------

// LogicFrame

// int32 frameid = 1;
inline void LogicFrame::clear_frameid() {
  _impl_.frameid_ = 0;
}
inline int32_t LogicFrame::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int32_t LogicFrame::frameid() const {
  // @@protoc_insertion_point(field_get:LogicFrame.frameid)
  return _internal_frameid();
}
inline void LogicFrame::_internal_set_frameid(int32_t value) {
  
  _impl_.frameid_ = value;
}
inline void LogicFrame::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:LogicFrame.frameid)
}

// repeated .FrameOpts unsync_frames = 2;
inline int LogicFrame::_internal_unsync_frames_size() const {
  return _impl_.unsync_frames_.size();
}
inline int LogicFrame::unsync_frames_size() const {
  return _internal_unsync_frames_size();
}
inline void LogicFrame::clear_unsync_frames() {
  _impl_.unsync_frames_.Clear();
}
inline ::FrameOpts* LogicFrame::mutable_unsync_frames(int index) {
  // @@protoc_insertion_point(field_mutable:LogicFrame.unsync_frames)
  return _impl_.unsync_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >*
LogicFrame::mutable_unsync_frames() {
  // @@protoc_insertion_point(field_mutable_list:LogicFrame.unsync_frames)
  return &_impl_.unsync_frames_;
}
inline const ::FrameOpts& LogicFrame::_internal_unsync_frames(int index) const {
  return _impl_.unsync_frames_.Get(index);
}
inline const ::FrameOpts& LogicFrame::unsync_frames(int index) const {
  // @@protoc_insertion_point(field_get:LogicFrame.unsync_frames)
  return _internal_unsync_frames(index);
}
inline ::FrameOpts* LogicFrame::_internal_add_unsync_frames() {
  return _impl_.unsync_frames_.Add();
}
inline ::FrameOpts* LogicFrame::add_unsync_frames() {
  ::FrameOpts* _add = _internal_add_unsync_frames();
  // @@protoc_insertion_point(field_add:LogicFrame.unsync_frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >&
LogicFrame::unsync_frames() const {
  // @@protoc_insertion_point(field_list:LogicFrame.unsync_frames)
  return _impl_.unsync_frames_;
}

// -------------------------------------------------------------------

// NextFrameOpts

// int32 frameid = 1;
inline void NextFrameOpts::clear_frameid() {
  _impl_.frameid_ = 0;
}
inline int32_t NextFrameOpts::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int32_t NextFrameOpts::frameid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpts.frameid)
  return _internal_frameid();
}
inline void NextFrameOpts::_internal_set_frameid(int32_t value) {
  
  _impl_.frameid_ = value;
}
inline void NextFrameOpts::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpts.frameid)
}

// int32 zid = 2;
inline void NextFrameOpts::clear_zid() {
  _impl_.zid_ = 0;
}
inline int32_t NextFrameOpts::_internal_zid() const {
  return _impl_.zid_;
}
inline int32_t NextFrameOpts::zid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpts.zid)
  return _internal_zid();
}
inline void NextFrameOpts::_internal_set_zid(int32_t value) {
  
  _impl_.zid_ = value;
}
inline void NextFrameOpts::set_zid(int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpts.zid)
}

// int32 matchid = 3;
inline void NextFrameOpts::clear_matchid() {
  _impl_.matchid_ = 0;
}
inline int32_t NextFrameOpts::_internal_matchid() const {
  return _impl_.matchid_;
}
inline int32_t NextFrameOpts::matchid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpts.matchid)
  return _internal_matchid();
}
inline void NextFrameOpts::_internal_set_matchid(int32_t value) {
  
  _impl_.matchid_ = value;
}
inline void NextFrameOpts::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpts.matchid)
}

// int32 seatid = 4;
inline void NextFrameOpts::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t NextFrameOpts::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t NextFrameOpts::seatid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpts.seatid)
  return _internal_seatid();
}
inline void NextFrameOpts::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void NextFrameOpts::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpts.seatid)
}

// repeated .OptionEvent opts = 5;
inline int NextFrameOpts::_internal_opts_size() const {
  return _impl_.opts_.size();
}
inline int NextFrameOpts::opts_size() const {
  return _internal_opts_size();
}
inline void NextFrameOpts::clear_opts() {
  _impl_.opts_.Clear();
}
inline ::OptionEvent* NextFrameOpts::mutable_opts(int index) {
  // @@protoc_insertion_point(field_mutable:NextFrameOpts.opts)
  return _impl_.opts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
NextFrameOpts::mutable_opts() {
  // @@protoc_insertion_point(field_mutable_list:NextFrameOpts.opts)
  return &_impl_.opts_;
}
inline const ::OptionEvent& NextFrameOpts::_internal_opts(int index) const {
  return _impl_.opts_.Get(index);
}
inline const ::OptionEvent& NextFrameOpts::opts(int index) const {
  // @@protoc_insertion_point(field_get:NextFrameOpts.opts)
  return _internal_opts(index);
}
inline ::OptionEvent* NextFrameOpts::_internal_add_opts() {
  return _impl_.opts_.Add();
}
inline ::OptionEvent* NextFrameOpts::add_opts() {
  ::OptionEvent* _add = _internal_add_opts();
  // @@protoc_insertion_point(field_add:NextFrameOpts.opts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
NextFrameOpts::opts() const {
  // @@protoc_insertion_point(field_list:NextFrameOpts.opts)
  return _impl_.opts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Stype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Stype>() {
  return ::Stype_descriptor();
}
template <> struct is_proto_enum< ::Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd>() {
  return ::Cmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
